/**
 * [Azure Cognitive Language Services](https://docs.microsoft.com/azure/cognitive-services/language-service/overview)
 * is a suite of natural language processing (NLP) skills built with
 * best-in-class Microsoft machine learning algorithms used to analyze
 * unstructured text for actions such as sentiment analysis, key phrase
 * extraction, and language detection.
 *
 * @packageDocumentation
 */

import { AzureKeyCredential } from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { KeyCredential } from '@azure/core-auth';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';
import { TokenCredential } from '@azure/core-auth';

/** Represents the Age entity resolution model. */
export declare interface AgeResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Age";
    /** The Age Unit of measurement */
    unit: AgeUnit;
}

/**
 * Defines values for AgeUnit.
 * {@link KnownAgeUnit} can be used interchangeably with AgeUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified**
 * **Year**
 * **Month**
 * **Week**
 * **Day**
 */
export declare type AgeUnit = string;

/** This is the parameter set of either the Orchestration project itself or one of the target services. */
export declare interface AnalysisParameters {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "Luis" | "Conversation" | "QuestionAnswering";
    /** The API version to use when call a specific target service. */
    apiVersion?: string;
}

export declare type AnalysisParametersUnion = LuisParameters | ConversationParameters | QuestionAnsweringParameters;

/** Container for results for all tasks in the conversation job. */
export declare interface AnalyzeConversationJobResult extends TaskStateAutoGenerated, TaskIdentifier {
    /** Enumeration of supported Conversation Analysis task results. */
    kind: AnalyzeConversationResultsKind;
}

export declare type AnalyzeConversationJobResultUnion = AnalyzeConversationPIIResult | AnalyzeConversationSummarizationResult;

export declare interface AnalyzeConversationJobsInput {
    /** Optional display name for the analysis job. */
    displayName?: string;
    analysisInput: MultiLanguageConversationAnalysisInput;
    /** The set of tasks to execute on the input conversation. */
    tasks: AnalyzeConversationLROTaskUnion[];
}

/** Contains the status of the analyze conversations job submitted along with related statistics. */
export declare interface AnalyzeConversationJobState extends JobStateAutoGenerated, ConversationTasksState, AnalyzeConversationJobStatistics {
}

/** Contains the statistics for the job submitted. */
export declare interface AnalyzeConversationJobStatistics {
    /** if showStats=true was specified in the request this field will contain information about the request payload. */
    statistics?: ConversationRequestStatistics;
}

/** The base class for an long running conversation input task. */
export declare interface AnalyzeConversationLROTask extends TaskIdentifier {
    /** Enumeration of supported analysis tasks on a collection of conversations. */
    kind: AnalyzeConversationLROTaskKind;
}

/**
 * Defines values for AnalyzeConversationLROTaskKind.
 * {@link KnownAnalyzeConversationLROTaskKind} can be used interchangeably with AnalyzeConversationLROTaskKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ConversationalPIITask**
 * **ConversationalSummarizationTask**
 */
export declare type AnalyzeConversationLROTaskKind = string;

export declare type AnalyzeConversationLROTaskUnion = AnalyzeConversationPIITask | AnalyzeConversationSummarizationTask;

/** Optional parameters. */
export declare interface AnalyzeConversationOptionalParams extends coreClient.OperationOptions {
}

/** Result from the personally identifiable information detection and redaction operation performed on a list of conversations. */
export declare interface AnalyzeConversationPIIResult extends AnalyzeConversationJobResult {
    /** The result from PII detection and redaction operation for each conversation. */
    kind: "conversationalPIIResults";
    results: ConversationPIIResults;
}

/** Task definition for a PII redaction in conversations. */
export declare interface AnalyzeConversationPIITask extends AnalyzeConversationLROTask {
    /** Supported parameters for a Conversational PII detection and redaction task. */
    parameters?: ConversationPIITaskParameters;
}

/** Contains response data for the analyzeConversation operation. */
export declare type AnalyzeConversationResponse = AnalyzeConversationTaskResultUnion;

/** Represents a conversation analysis response. */
export declare interface AnalyzeConversationResult {
    /** The conversation utterance given by the caller. */
    query: string;
    /** The system detected language for the query in BCP 47 language representation.. */
    detectedLanguage?: string;
    /** The prediction result of a conversation project. */
    prediction: BasePredictionUnion;
}

/**
 * Defines values for AnalyzeConversationResultsKind.
 * {@link KnownAnalyzeConversationResultsKind} can be used interchangeably with AnalyzeConversationResultsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ConversationalPIIResults**
 * **ConversationalSummarizationResults**
 */
export declare type AnalyzeConversationResultsKind = "conversationalPIIResults" | "conversationalSummarizationResults";

/** Result for the summarization task on the conversation. */
export declare interface AnalyzeConversationSummarizationResult extends AnalyzeConversationJobResult {
    kind: "conversationalSummarizationResults";
    results: SummaryResult;
}

/** Task definition for conversational summarization. */
export declare interface AnalyzeConversationSummarizationTask extends AnalyzeConversationLROTask {
    /** Supported parameters for an conversational summarization task. */
    parameters?: ConversationSummarizationTaskParameters;
}

/** The base class of a conversation input task. */
export declare interface AnalyzeConversationTask {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Conversation";
}

/**
 * Defines values for AnalyzeConversationTaskKind.
 * {@link KnownAnalyzeConversationTaskKind} can be used interchangeably with AnalyzeConversationTaskKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Conversation**
 */
export declare type AnalyzeConversationTaskKind = string;

/** The base class of a conversation task result. */
export declare interface AnalyzeConversationTaskResult {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ConversationResult";
}

/**
 * Defines values for AnalyzeConversationTaskResultsKind.
 * {@link KnownAnalyzeConversationTaskResultsKind} can be used interchangeably with AnalyzeConversationTaskResultsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ConversationResult**
 */
export declare type AnalyzeConversationTaskResultsKind = string;

export declare type AnalyzeConversationTaskResultUnion = ConversationalTaskResult;

export declare type AnalyzeConversationTaskUnion = ConversationalTask;

/** Parameters to query a knowledge base. */
export declare interface AnswersOptions {
    /** Exact QnA ID to fetch from the knowledge base, this field takes priority over question. */
    qnaId?: number;
    /** User question to query against the knowledge base. */
    question?: string;
    /** Max number of answers to be returned for the question. */
    top?: number;
    /** Unique identifier for the user. */
    userId?: string;
    /** Minimum threshold score for answers, value ranges from 0 to 1. */
    confidenceThreshold?: number;
    /** Context object with previous QnA's information. */
    answerContext?: KnowledgeBaseAnswerContext;
    /** Type of ranker to be used. */
    rankerKind?: RankerKind;
    /** Filter QnAs based on given metadata list and knowledge base sources. */
    filters?: QueryFilters;
    /** To configure Answer span prediction feature. */
    shortAnswerOptions?: ShortAnswerOptions;
    /** (Optional) Flag to enable Query over Unstructured Sources. */
    includeUnstructuredSources?: boolean;
}

/** Answer span object of QnA. */
export declare interface AnswerSpan {
    /** Predicted text of answer span. */
    text?: string;
    /** Predicted score of answer span, value ranges from 0 to 1. */
    confidence?: number;
    /** The answer span offset from the start of answer. */
    offset?: number;
    /** The length of the answer span. */
    length?: number;
}

/** Represents List of Question Answers. */
export declare interface AnswersResult {
    /** Represents Answer Result list. */
    answers?: KnowledgeBaseAnswer[];
}

/** Represents the area entity resolution model. */
export declare interface AreaResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Area";
    /** The area Unit of measurement */
    unit: AreaUnit;
}

/**
 * Defines values for AreaUnit.
 * {@link KnownAreaUnit} can be used interchangeably with AreaUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified**
 * **SquareKilometer**
 * **SquareHectometer**
 * **SquareDecameter**
 * **SquareDecimeter**
 * **SquareMeter**
 * **SquareCentimeter**
 * **SquareMillimeter**
 * **SquareInch**
 * **SquareFoot**
 * **SquareMile**
 * **SquareYard**
 * **Acre**
 */
export declare type AreaUnit = string;

/** The audio timing information. */
export declare interface AudioTiming {
    /** Offset from start of speech audio, in ticks. 1 tick = 100 ns. */
    offset?: number;
    /** Duration of word articulation, in ticks. 1 tick = 100 ns. */
    duration?: number;
}

export { AzureKeyCredential }

/** The abstract base object for entity extra information. */
export declare interface BaseExtraInformation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    extraInformationKind: "EntitySubtype" | "ListKey";
}

export declare type BaseExtraInformationUnion = EntitySubtype | ListKey;

/** This is the base class of prediction */
export declare interface BasePrediction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    projectKind: "Conversation" | "Orchestration";
    /** The intent with the highest score. */
    topIntent?: string;
}

export declare type BasePredictionUnion = ConversationPrediction | OrchestrationPrediction;

/** The abstract base class for entity resolutions. */
export declare interface BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Age" | "Volume" | "Speed" | "Area" | "Length" | "Information" | "Temperature" | "Weight" | "Currency" | "Boolean" | "DateTime" | "Number" | "Ordinal" | "TemporalSpan" | "NumericRange";
}

export declare type BaseResolutionUnion = AgeResolution | VolumeResolution | SpeedResolution | AreaResolution | LengthResolution | InformationResolution | TemperatureResolution | WeightResolution | CurrencyResolution | BooleanResolution | DateTimeResolution | NumberResolution | OrdinalResolution | TemporalSpanResolution | NumericRangeResolution;

/** A resolution for boolean expressions */
export declare interface BooleanResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Boolean";
    value: boolean;
}

/** A complete ordered set of utterances (spoken or written), by one or more speakers to be used for analysis. */
export declare interface Conversation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    modality: "text" | "transcript";
    /** Unique identifier for the conversation. */
    id: string;
    /** The language of the conversation item in BCP-47 format. */
    language: string;
    /** Enumeration of supported conversational domains. */
    domain?: ConversationDomain;
}

/** The input for a custom conversation task. */
export declare interface ConversationalTask extends AnalyzeConversationTask {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Conversation";
    /** The input ConversationItem and its optional parameters */
    analysisInput: ConversationAnalysisOptions;
    /** Input parameters necessary for a Conversation task. */
    parameters: ConversationTaskParameters;
}

/** The results of a Conversation task. */
export declare interface ConversationalTaskResult extends AnalyzeConversationTaskResult {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ConversationResult";
    /** Represents a conversation analysis response. */
    result: AnalyzeConversationResult;
}

/**
 * A client for interacting with the conversational language understanding
 * features in Azure Cognitive Language Service.
 *
 * The client needs the endpoint of a Language resource and an authentication
 * method such as an API key or AAD. The API key and endpoint can be found in
 * the Language resource page in the Azure portal. They will be located in the
 * resource's Keys and Endpoint page, under Resource Management.
 *
 * ### Examples for authentication:
 *
 * #### API Key
 *
 * ```js
 * import { AzureKeyCredential } from "@azure/core-auth";
 * import { ConversationAnalysisClient } from "@azure/ai-language-conversations";
 *
 * const endpoint = "https://<resource name>.cognitiveservices.azure.com";
 * const credential = new AzureKeyCredential("<api key>");
 *
 * const client = new ConversationAnalysisClient(endpoint, credential);
 * ```
 *
 * #### Azure Active Directory
 *
 * See the [`@azure/identity`](https://npmjs.com/package/\@azure/identity)
 * package for more information about authenticating with Azure Active Directory.
 *
 * ```js
 * import { ConversationAnalysisClient } from "@azure/ai-language-conversations";
 * import { DefaultAzureCredential } from "@azure/identity";
 *
 * const endpoint = "https://<resource name>.cognitiveservices.azure.com";
 * const credential = new DefaultAzureCredential();
 *
 * const client = new ConversationAnalysisClient(endpoint, credential);
 * ```
 */
export declare class ConversationAnalysisClient {
    private readonly _client;
    private readonly _tracing;
    /**
     * Initializes a new instance of the ConversationAnalysisClient class.
     * @param endpoint - Supported Cognitive Services endpoint (e.g.,
     *                 https://<resource-name>.api.cognitiveservices.azure.com).
     * @param options - The parameter options
     */
    constructor(endpoint: string, credential: TokenCredential | KeyCredential, options?: ConversationAnalysisClientOptionalParams);
    /**
     * Analyzes the input conversation utterance.
     * @param task - A single conversational task to execute.
     * @param options - The options parameters.
     */
    analyzeConversation(task: AnalyzeConversationTaskUnion, options?: AnalyzeConversationOptionalParams): Promise<AnalyzeConversationResponse>;
    /**
     * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.
     * @param task - The collection of conversations to analyze and one or more tasks to execute.
     * @param options - The options parameters.
     */
    beginConversationAnalysis(task: AnalyzeConversationJobsInput, options?: ConversationAnalysisOptionalParams): Promise<PollerLike<PollOperationState<ConversationAnalysisResponse>, ConversationAnalysisResponse>>;
}

/** Defines headers for ConversationAnalysisClient_analyzeConversation operation. */
export declare interface ConversationAnalysisClientAnalyzeConversationExceptionHeaders {
    /** The error code for specific error that occurred. */
    xMsErrorCode?: string;
}

/** Defines headers for ConversationAnalysisClient_conversationAnalysis operation. */
export declare interface ConversationAnalysisClientConversationAnalysisHeaders {
    operationLocation?: string;
}

/** Optional parameters. */
export declare interface ConversationAnalysisClientOptionalParams extends coreClient.ServiceClientOptions {
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Optional parameters. */
export declare interface ConversationAnalysisOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** The input ConversationItem and its optional parameters */
export declare interface ConversationAnalysisOptions {
    /** The abstract base for a user input formatted conversation (e.g., Text, Transcript). */
    conversationItem: ConversationItemBase;
}

/** Contains response data for the conversationAnalysis operation. */
export declare type ConversationAnalysisResponse = AnalyzeConversationJobState;

/** The option to set to call a Conversation project. */
export declare interface ConversationCallingOptions {
    /** The language of the query in BCP 47 language representation.. */
    language?: string;
    /** If true, the service will return more detailed information. */
    verbose?: boolean;
    /** If true, the query will be saved for customers to further review in authoring, to improve the model quality. */
    isLoggingEnabled?: boolean;
}

/**
 * Defines values for ConversationDomain.
 * {@link KnownConversationDomain} can be used interchangeably with ConversationDomain,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **finance**
 * **healthcare**
 * **generic**
 */
export declare type ConversationDomain = string;

/** The entity extraction result of a Conversation project. */
export declare interface ConversationEntity {
    /** The entity category. */
    category: string;
    /** The predicted entity text. */
    text: string;
    /** The starting index of this entity in the query. */
    offset: number;
    /** The length of the text. */
    length: number;
    /** The entity confidence score. */
    confidence: number;
    /** The collection of entity resolution objects. */
    resolutions?: BaseResolutionUnion[];
    /** The collection of entity extra information objects. */
    extraInformation?: BaseExtraInformationUnion[];
}

/** The intent classification result of a Conversation project. */
export declare interface ConversationIntent {
    /** A predicted class. */
    category: string;
    /** The confidence score of the class from 0.0 to 1.0. */
    confidence: number;
}

/** The abstract base for a user input formatted conversation (e.g., Text, Transcript). */
export declare interface ConversationItemBase {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The ID of a conversation item. */
    id: string;
    /** The participant ID of a conversation item. */
    participantId: string;
    /** The override language of a conversation item in BCP 47 language representation. */
    language?: string;
    /** Enumeration of supported conversational modalities. */
    modality?: InputModality;
    /** The role of the participant. */
    role?: Role;
}

/** This is a set of request parameters for Customized Conversation projects. */
export declare interface ConversationParameters extends AnalysisParameters {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "Conversation";
    /** The option to set to call a Conversation project. */
    callingOptions?: ConversationCallingOptions;
}

/**
 * Defines values for ConversationPIICategory.
 * {@link KnownConversationPIICategory} can be used interchangeably with ConversationPIICategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Address**
 * **CreditCard**
 * **Email**
 * **Name**
 * **NumericIdentifier**
 * **PhoneNumber**
 * **All**
 * **Default**
 */
export declare type ConversationPIICategory = string;

export declare interface ConversationPIIItemResult {
    id: string;
    /** The transcript content response generated by the service with all necessary personally identifiable information redacted. */
    redactedContent: RedactedTranscriptContent;
    entities: Entity[];
}

/** The result from PII detection and redaction operation for each conversation. */
export declare interface ConversationPIIResult {
    /** Enumeration of PII detection and redaction operation results for all the conversation items in a conversation. */
    conversationItems: ConversationPIIItemResult[];
}

/** The result from PII detection and redaction operation for each conversation. */
export declare interface ConversationPIIResults extends PreBuiltResult {
    conversations: ConversationPIIResultsConversationsItem[];
}

export declare interface ConversationPIIResultsConversationsItem extends ConversationPIIResult, ConversationResultBase {
}

/** Supported parameters for a Conversational PII detection and redaction task. */
export declare interface ConversationPIITaskParameters extends PreBuiltTaskParameters {
    /** Describes the PII categories to return for detection. If not provided, 'default' categories will be returned which will vary with the language. */
    piiCategories?: ConversationPIICategory[];
    /** Flag to indicate if audio redaction is requested. By default audio redaction will not be performed. */
    includeAudioRedaction?: boolean;
    /** For transcript conversations, this parameter provides information regarding which content type (ITN, Text, Lexical, Masked ITN) should be used for entity detection. The details of the entities detected - like the offset, length and the text itself - will correspond to the text type selected here. */
    redactionSource?: TranscriptContentType;
}

/** Represents the prediction section of a Conversation project. */
export declare interface ConversationPrediction extends BasePrediction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    projectKind: "Conversation";
    /** The intent classification results. */
    intents: ConversationIntent[];
    /** The entity extraction results. */
    entities: ConversationEntity[];
}

/** if showStats=true was specified in the request this field will contain information about the request payload. */
export declare interface ConversationRequestStatistics extends RequestStatistics {
    /** Number of conversations submitted in the request. */
    conversationsCount: number;
    /** Number of conversations documents. This excludes empty, over-size limit or non-supported languages documents. */
    validConversationsCount: number;
    /** Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. */
    erroneousConversationsCount: number;
}

/** The response returned by a Conversation project. */
export declare interface ConversationResult {
    /** The same query given in request. */
    query: string;
    /** The detected language from the query in BCP 47 language representation.. */
    detectedLanguage?: string;
    /** The predicted result for the query. */
    prediction?: ConversationPrediction;
}

/** Shared attributes for all conversational task results. */
export declare interface ConversationResultBase {
    /** Unique, non-empty conversation identifier. */
    id: string;
    /** Warnings encountered while processing document. */
    warnings: InputWarning[];
    /** If showStats=true was specified in the request this field will contain information about the conversation payload. */
    statistics?: ConversationStatistics;
}

export declare interface ConversationsSummaryResult {
    summaries: ConversationsSummaryResultSummariesItem[];
}

export declare interface ConversationsSummaryResultSummariesItem extends SummaryResultItem {
}

/** If showStats=true was specified in the request this field will contain information about the conversation payload. */
export declare interface ConversationStatistics {
    /** Number of text units for the request. */
    transactionsCount: number;
}

/** Supported parameters for an conversational summarization task. */
export declare interface ConversationSummarizationTaskParameters extends PreBuiltTaskParameters {
    summaryAspects: SummaryAspect[];
}

/** A wrap up of Conversation project response. */
export declare interface ConversationTargetIntentResult extends TargetIntentResult {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "Conversation";
    /** The actual response from a Conversation project. */
    result?: ConversationResult;
}

/** Input parameters necessary for a Conversation task. */
export declare interface ConversationTaskParameters {
    /** The name of the project to use. */
    projectName: string;
    /** The name of the deployment to use. */
    deploymentName: string;
    /** If true, the service will return more detailed information in the response. */
    verbose?: boolean;
    /** If true, the service will keep the query for further review. */
    isLoggingEnabled?: boolean;
    /** Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets. */
    stringIndexType?: StringIndexType;
    /** The name of a target project to forward the request to. */
    directTarget?: string;
    /** A dictionary representing the parameters for each target project. */
    targetProjectParameters?: {
        [propertyName: string]: AnalysisParametersUnion;
    };
}

/** Contains the state for the tasks being executed as part of the analyze conversation job submitted. */
export declare interface ConversationTasksState {
    tasks: ConversationTasksStateTasks;
}

export declare interface ConversationTasksStateTasks {
    /** Count of tasks completed successfully. */
    completed: number;
    /** Count of tasks that failed. */
    failed: number;
    /** Count of tasks in progress currently. */
    inProgress: number;
    /** Total count of tasks submitted as part of the job. */
    total: number;
    /** List of results from tasks (if available). */
    items?: AnalyzeConversationJobResultUnion[];
}

export declare type ConversationUnion = TextConversation | TranscriptConversation;

/** Represents the currency entity resolution model. */
export declare interface CurrencyResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Currency";
    /** The alphabetic code based on another ISO standard, ISO 3166, which lists the codes for country names. The first two letters of the ISO 4217 three-letter code are the same as the code for the country name, and, where possible, the third letter corresponds to the first letter of the currency name. */
    iso4217?: string;
    /** The unit of the amount captured in the extracted entity */
    unit: string;
}

/** A resolution for datetime entity instances. */
export declare interface DateTimeResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "DateTime";
    /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
    timex: string;
    /** The DateTime SubKind */
    dateTimeSubKind: DateTimeSubKind;
    /** The actual time that the extracted text denote. */
    value: string;
    /** An optional modifier of a date/time instance. */
    modifier?: TemporalModifier;
}

/**
 * Defines values for DateTimeSubKind.
 * {@link KnownDateTimeSubKind} can be used interchangeably with DateTimeSubKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Time**
 * **Date**
 * **DateTime**
 * **Duration**
 * **Set**
 */
export declare type DateTimeSubKind = string;

export declare interface Entity {
    /** Entity text as appears in the request. */
    text: string;
    /** Entity type. */
    category: string;
    /** (Optional) Entity sub type. */
    subcategory?: string;
    /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */
    offset: number;
    /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */
    length: number;
    /** Confidence score between 0 and 1 of the extracted entity. */
    confidenceScore: number;
}

/** The concrete entity Subtype model of extra information. */
export declare interface EntitySubtype extends BaseExtraInformation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    extraInformationKind: "EntitySubtype";
    /** The Subtype of an extracted entity type. */
    value?: string;
}

/**
 * Defines values for ErrorCode.
 * {@link KnownErrorCode} can be used interchangeably with ErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvalidRequest**
 * **InvalidArgument**
 * **Unauthorized**
 * **Forbidden**
 * **NotFound**
 * **ProjectNotFound**
 * **OperationNotFound**
 * **AzureCognitiveSearchNotFound**
 * **AzureCognitiveSearchIndexNotFound**
 * **TooManyRequests**
 * **AzureCognitiveSearchThrottling**
 * **AzureCognitiveSearchIndexLimitReached**
 * **InternalServerError**
 * **ServiceUnavailable**
 * **Timeout**
 * **QuotaExceeded**
 * **Conflict**
 * **Warning**
 */
export declare type ErrorCode = string;

/** The error object. */
export declare interface ErrorModel {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** One of a server-defined set of error codes. */
    code: ErrorCode;
    /** A human-readable representation of the error. */
    message: string;
    /** The target of the error. */
    target?: string;
    /** An array of details about specific errors that led to this reported error. */
    details?: ErrorModel[];
    /** An object containing more specific information than the current object about the error. */
    innererror?: InnerErrorModel;
}

/** Error response. */
export declare interface ErrorResponse {
    /** The error object. */
    error: ErrorModel;
}

/**
 * Defines values for ExtraInformationKind.
 * {@link KnownExtraInformationKind} can be used interchangeably with ExtraInformationKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EntitySubtype**
 * **ListKey**
 */
export declare type ExtraInformationKind = string;

/** Represents the information (data) entity resolution model. */
export declare interface InformationResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Information";
    /** The information (data) Unit of measurement. */
    unit: InformationUnit;
}

/**
 * Defines values for InformationUnit.
 * {@link KnownInformationUnit} can be used interchangeably with InformationUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified**
 * **Bit**
 * **Kilobit**
 * **Megabit**
 * **Gigabit**
 * **Terabit**
 * **Petabit**
 * **Byte**
 * **Kilobyte**
 * **Megabyte**
 * **Gigabyte**
 * **Terabyte**
 * **Petabyte**
 */
export declare type InformationUnit = string;

/**
 * Defines values for InnerErrorCode.
 * {@link KnownInnerErrorCode} can be used interchangeably with InnerErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvalidRequest**
 * **InvalidParameterValue**
 * **KnowledgeBaseNotFound**
 * **AzureCognitiveSearchNotFound**
 * **AzureCognitiveSearchThrottling**
 * **ExtractionFailure**
 * **InvalidRequestBodyFormat**
 * **EmptyRequest**
 * **MissingInputDocuments**
 * **InvalidDocument**
 * **ModelVersionIncorrect**
 * **InvalidDocumentBatch**
 * **UnsupportedLanguageCode**
 * **InvalidCountryHint**
 */
export declare type InnerErrorCode = string;

/** An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses. */
export declare interface InnerErrorModel {
    /** One of a server-defined set of error codes. */
    code: InnerErrorCode;
    /** Error message. */
    message: string;
    /** Error details. */
    details?: {
        [propertyName: string]: string;
    };
    /** Error target. */
    target?: string;
    /** An object containing more specific information than the current object about the error. */
    innererror?: InnerErrorModel;
}

/** Contains details of errors encountered during a job execution. */
export declare interface InputError {
    /** The ID of the input. */
    id: string;
    /** Error encountered. */
    error: ErrorModel;
}

/**
 * Defines values for InputModality.
 * {@link KnownInputModality} can be used interchangeably with InputModality,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **transcript**
 * **text**
 */
export declare type InputModality = string;

/** Contains details of warnings encountered during a job execution. */
export declare interface InputWarning {
    /** Warning code. */
    code: string;
    /** Warning message. */
    message: string;
    /** A JSON pointer reference indicating the target object. */
    targetRef?: string;
}

/**
 * Defines values for JobState.
 * {@link KnownJobState} can be used interchangeably with JobState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **notStarted**
 * **running**
 * **succeeded**
 * **partiallyCompleted**
 * **failed**
 * **cancelled**
 * **cancelling**
 */
export declare type JobState = string;

export declare interface JobStateAutoGenerated {
    displayName?: string;
    createdDateTime: Date;
    expirationDateTime?: Date;
    jobId: string;
    lastUpdatedDateTime: Date;
    status: JobState;
    errors?: ErrorModel[];
    nextLink?: string;
}

/** Represents knowledge base answer. */
export declare interface KnowledgeBaseAnswer {
    /** List of questions associated with the answer. */
    questions?: string[];
    /** Answer text. */
    answer?: string;
    /** Answer confidence score, value ranges from 0 to 1. */
    confidence?: number;
    /** ID of the QnA result. */
    qnaId?: number;
    /** Source of QnA result. */
    source?: string;
    /** Metadata associated with the answer, useful to categorize or filter question answers. */
    metadata?: {
        [propertyName: string]: string;
    };
    /** Dialog associated with Answer. */
    dialog?: KnowledgeBaseAnswerDialog;
    /** Answer span object of QnA with respect to user's question. */
    shortAnswer?: AnswerSpan;
}

/** Context object with previous QnA's information. */
export declare interface KnowledgeBaseAnswerContext {
    /** Previous turn top answer result QnA ID. */
    previousQnaId: number;
    /** Previous user query. */
    previousQuestion?: string;
}

/** Dialog associated with Answer. */
export declare interface KnowledgeBaseAnswerDialog {
    /** To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as search result for queries without context; otherwise, if false, ignores context and includes this QnA in search result. */
    isContextOnly?: boolean;
    /** List of prompts associated with the answer. */
    prompts?: KnowledgeBaseAnswerPrompt[];
}

/** Prompt for an answer. */
export declare interface KnowledgeBaseAnswerPrompt {
    /** Index of the prompt - used in ordering of the prompts. */
    displayOrder?: number;
    /** QnA ID corresponding to the prompt. */
    qnaId?: number;
    /** Text displayed to represent a follow up question prompt. */
    displayText?: string;
}

/** Known values of {@link AgeUnit} that the service accepts. */
export declare enum KnownAgeUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Year */
    Year = "Year",
    /** Month */
    Month = "Month",
    /** Week */
    Week = "Week",
    /** Day */
    Day = "Day"
}

/** Known values of {@link AnalyzeConversationLROTaskKind} that the service accepts. */
export declare enum KnownAnalyzeConversationLROTaskKind {
    /** ConversationalPIITask */
    ConversationalPIITask = "ConversationalPIITask",
    /** ConversationalSummarizationTask */
    ConversationalSummarizationTask = "ConversationalSummarizationTask"
}

/** Known values of {@link AnalyzeConversationResultsKind} that the service accepts. */
export declare enum KnownAnalyzeConversationResultsKind {
    /** ConversationalPIIResults */
    ConversationalPIIResults = "ConversationalPIIResults",
    /** ConversationalSummarizationResults */
    ConversationalSummarizationResults = "ConversationalSummarizationResults"
}

/** Known values of {@link AnalyzeConversationTaskKind} that the service accepts. */
export declare enum KnownAnalyzeConversationTaskKind {
    /** Conversation */
    Conversation = "Conversation"
}

/** Known values of {@link AnalyzeConversationTaskResultsKind} that the service accepts. */
export declare enum KnownAnalyzeConversationTaskResultsKind {
    /** ConversationResult */
    ConversationResult = "ConversationResult"
}

/** Known values of {@link AreaUnit} that the service accepts. */
export declare enum KnownAreaUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** SquareKilometer */
    SquareKilometer = "SquareKilometer",
    /** SquareHectometer */
    SquareHectometer = "SquareHectometer",
    /** SquareDecameter */
    SquareDecameter = "SquareDecameter",
    /** SquareDecimeter */
    SquareDecimeter = "SquareDecimeter",
    /** SquareMeter */
    SquareMeter = "SquareMeter",
    /** SquareCentimeter */
    SquareCentimeter = "SquareCentimeter",
    /** SquareMillimeter */
    SquareMillimeter = "SquareMillimeter",
    /** SquareInch */
    SquareInch = "SquareInch",
    /** SquareFoot */
    SquareFoot = "SquareFoot",
    /** SquareMile */
    SquareMile = "SquareMile",
    /** SquareYard */
    SquareYard = "SquareYard",
    /** Acre */
    Acre = "Acre"
}

/** Known values of {@link ConversationDomain} that the service accepts. */
export declare enum KnownConversationDomain {
    /** Finance */
    Finance = "finance",
    /** Healthcare */
    Healthcare = "healthcare",
    /** Generic */
    Generic = "generic"
}

/** Known values of {@link ConversationPIICategory} that the service accepts. */
export declare enum KnownConversationPIICategory {
    /** Address */
    Address = "Address",
    /** CreditCard */
    CreditCard = "CreditCard",
    /** Email */
    Email = "Email",
    /** Name */
    Name = "Name",
    /** NumericIdentifier */
    NumericIdentifier = "NumericIdentifier",
    /** PhoneNumber */
    PhoneNumber = "PhoneNumber",
    /** All */
    All = "All",
    /** Default */
    Default = "Default"
}

/** Known values of {@link DateTimeSubKind} that the service accepts. */
export declare enum KnownDateTimeSubKind {
    /** Time */
    Time = "Time",
    /** Date */
    Date = "Date",
    /** DateTime */
    DateTime = "DateTime",
    /** Duration */
    Duration = "Duration",
    /** Set */
    Set = "Set"
}

/** Known values of {@link ErrorCode} that the service accepts. */
export declare enum KnownErrorCode {
    /** InvalidRequest */
    InvalidRequest = "InvalidRequest",
    /** InvalidArgument */
    InvalidArgument = "InvalidArgument",
    /** Unauthorized */
    Unauthorized = "Unauthorized",
    /** Forbidden */
    Forbidden = "Forbidden",
    /** NotFound */
    NotFound = "NotFound",
    /** ProjectNotFound */
    ProjectNotFound = "ProjectNotFound",
    /** OperationNotFound */
    OperationNotFound = "OperationNotFound",
    /** AzureCognitiveSearchNotFound */
    AzureCognitiveSearchNotFound = "AzureCognitiveSearchNotFound",
    /** AzureCognitiveSearchIndexNotFound */
    AzureCognitiveSearchIndexNotFound = "AzureCognitiveSearchIndexNotFound",
    /** TooManyRequests */
    TooManyRequests = "TooManyRequests",
    /** AzureCognitiveSearchThrottling */
    AzureCognitiveSearchThrottling = "AzureCognitiveSearchThrottling",
    /** AzureCognitiveSearchIndexLimitReached */
    AzureCognitiveSearchIndexLimitReached = "AzureCognitiveSearchIndexLimitReached",
    /** InternalServerError */
    InternalServerError = "InternalServerError",
    /** ServiceUnavailable */
    ServiceUnavailable = "ServiceUnavailable",
    /** Timeout */
    Timeout = "Timeout",
    /** QuotaExceeded */
    QuotaExceeded = "QuotaExceeded",
    /** Conflict */
    Conflict = "Conflict",
    /** Warning */
    Warning = "Warning"
}

/** Known values of {@link ExtraInformationKind} that the service accepts. */
export declare enum KnownExtraInformationKind {
    /** EntitySubtype */
    EntitySubtype = "EntitySubtype",
    /** ListKey */
    ListKey = "ListKey"
}

/** Known values of {@link InformationUnit} that the service accepts. */
export declare enum KnownInformationUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Bit */
    Bit = "Bit",
    /** Kilobit */
    Kilobit = "Kilobit",
    /** Megabit */
    Megabit = "Megabit",
    /** Gigabit */
    Gigabit = "Gigabit",
    /** Terabit */
    Terabit = "Terabit",
    /** Petabit */
    Petabit = "Petabit",
    /** Byte */
    Byte = "Byte",
    /** Kilobyte */
    Kilobyte = "Kilobyte",
    /** Megabyte */
    Megabyte = "Megabyte",
    /** Gigabyte */
    Gigabyte = "Gigabyte",
    /** Terabyte */
    Terabyte = "Terabyte",
    /** Petabyte */
    Petabyte = "Petabyte"
}

/** Known values of {@link InnerErrorCode} that the service accepts. */
export declare enum KnownInnerErrorCode {
    /** InvalidRequest */
    InvalidRequest = "InvalidRequest",
    /** InvalidParameterValue */
    InvalidParameterValue = "InvalidParameterValue",
    /** KnowledgeBaseNotFound */
    KnowledgeBaseNotFound = "KnowledgeBaseNotFound",
    /** AzureCognitiveSearchNotFound */
    AzureCognitiveSearchNotFound = "AzureCognitiveSearchNotFound",
    /** AzureCognitiveSearchThrottling */
    AzureCognitiveSearchThrottling = "AzureCognitiveSearchThrottling",
    /** ExtractionFailure */
    ExtractionFailure = "ExtractionFailure",
    /** InvalidRequestBodyFormat */
    InvalidRequestBodyFormat = "InvalidRequestBodyFormat",
    /** EmptyRequest */
    EmptyRequest = "EmptyRequest",
    /** MissingInputDocuments */
    MissingInputDocuments = "MissingInputDocuments",
    /** InvalidDocument */
    InvalidDocument = "InvalidDocument",
    /** ModelVersionIncorrect */
    ModelVersionIncorrect = "ModelVersionIncorrect",
    /** InvalidDocumentBatch */
    InvalidDocumentBatch = "InvalidDocumentBatch",
    /** UnsupportedLanguageCode */
    UnsupportedLanguageCode = "UnsupportedLanguageCode",
    /** InvalidCountryHint */
    InvalidCountryHint = "InvalidCountryHint"
}

/** Known values of {@link InputModality} that the service accepts. */
export declare enum KnownInputModality {
    /** Transcript */
    Transcript = "transcript",
    /** Text */
    Text = "text"
}

/** Known values of {@link JobState} that the service accepts. */
export declare enum KnownJobState {
    /** NotStarted */
    NotStarted = "notStarted",
    /** Running */
    Running = "running",
    /** Succeeded */
    Succeeded = "succeeded",
    /** PartiallyCompleted */
    PartiallyCompleted = "partiallyCompleted",
    /** Failed */
    Failed = "failed",
    /** Cancelled */
    Cancelled = "cancelled",
    /** Cancelling */
    Cancelling = "cancelling"
}

/** Known values of {@link LengthUnit} that the service accepts. */
export declare enum KnownLengthUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Kilometer */
    Kilometer = "Kilometer",
    /** Hectometer */
    Hectometer = "Hectometer",
    /** Decameter */
    Decameter = "Decameter",
    /** Meter */
    Meter = "Meter",
    /** Decimeter */
    Decimeter = "Decimeter",
    /** Centimeter */
    Centimeter = "Centimeter",
    /** Millimeter */
    Millimeter = "Millimeter",
    /** Micrometer */
    Micrometer = "Micrometer",
    /** Nanometer */
    Nanometer = "Nanometer",
    /** Picometer */
    Picometer = "Picometer",
    /** Mile */
    Mile = "Mile",
    /** Yard */
    Yard = "Yard",
    /** Inch */
    Inch = "Inch",
    /** Foot */
    Foot = "Foot",
    /** LightYear */
    LightYear = "LightYear",
    /** Pt */
    Pt = "Pt"
}

/** Known values of {@link LogicalOperationKind} that the service accepts. */
export declare enum KnownLogicalOperationKind {
    /** AND */
    AND = "AND",
    /** OR */
    OR = "OR"
}

/** Known values of {@link NumberKind} that the service accepts. */
export declare enum KnownNumberKind {
    /** Integer */
    Integer = "Integer",
    /** Decimal */
    Decimal = "Decimal",
    /** Power */
    Power = "Power",
    /** Fraction */
    Fraction = "Fraction",
    /** Percent */
    Percent = "Percent",
    /** Unspecified */
    Unspecified = "Unspecified"
}

/** Known values of {@link ProjectKind} that the service accepts. */
export declare enum KnownProjectKind {
    /** Conversation */
    Conversation = "Conversation",
    /** Orchestration */
    Orchestration = "Orchestration"
}

/** Known values of {@link RangeKind} that the service accepts. */
export declare enum KnownRangeKind {
    /** Number */
    Number = "Number",
    /** Speed */
    Speed = "Speed",
    /** Weight */
    Weight = "Weight",
    /** Length */
    Length = "Length",
    /** Volume */
    Volume = "Volume",
    /** Area */
    Area = "Area",
    /** Age */
    Age = "Age",
    /** Information */
    Information = "Information",
    /** Temperature */
    Temperature = "Temperature",
    /** Currency */
    Currency = "Currency"
}

/** Known values of {@link RankerKind} that the service accepts. */
export declare enum KnownRankerKind {
    /** Question only ranker. */
    QuestionOnly = "QuestionOnly",
    /** Default ranker. */
    Default = "Default"
}

/** Known values of {@link RelativeTo} that the service accepts. */
export declare enum KnownRelativeTo {
    /** Current */
    Current = "Current",
    /** End */
    End = "End",
    /** Start */
    Start = "Start"
}

/** Known values of {@link ResolutionKind} that the service accepts. */
export declare enum KnownResolutionKind {
    /** Boolean */
    Boolean = "Boolean",
    /** DateTime */
    DateTime = "DateTime",
    /** Number */
    Number = "Number",
    /** Ordinal */
    Ordinal = "Ordinal",
    /** Speed */
    Speed = "Speed",
    /** Weight */
    Weight = "Weight",
    /** Length */
    Length = "Length",
    /** Volume */
    Volume = "Volume",
    /** Area */
    Area = "Area",
    /** Age */
    Age = "Age",
    /** Information */
    Information = "Information",
    /** Temperature */
    Temperature = "Temperature",
    /** Currency */
    Currency = "Currency",
    /** NumericRange */
    NumericRange = "NumericRange",
    /** TemporalSpan */
    TemporalSpan = "TemporalSpan"
}

/** Known values of {@link Role} that the service accepts. */
export declare enum KnownRole {
    /** Agent */
    Agent = "agent",
    /** Customer */
    Customer = "customer",
    /** Generic */
    Generic = "generic"
}

/** Known values of {@link SpeedUnit} that the service accepts. */
export declare enum KnownSpeedUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** MetersPerSecond */
    MetersPerSecond = "MetersPerSecond",
    /** KilometersPerHour */
    KilometersPerHour = "KilometersPerHour",
    /** KilometersPerMinute */
    KilometersPerMinute = "KilometersPerMinute",
    /** KilometersPerSecond */
    KilometersPerSecond = "KilometersPerSecond",
    /** MilesPerHour */
    MilesPerHour = "MilesPerHour",
    /** Knot */
    Knot = "Knot",
    /** FootPerSecond */
    FootPerSecond = "FootPerSecond",
    /** FootPerMinute */
    FootPerMinute = "FootPerMinute",
    /** YardsPerMinute */
    YardsPerMinute = "YardsPerMinute",
    /** YardsPerSecond */
    YardsPerSecond = "YardsPerSecond",
    /** MetersPerMillisecond */
    MetersPerMillisecond = "MetersPerMillisecond",
    /** CentimetersPerMillisecond */
    CentimetersPerMillisecond = "CentimetersPerMillisecond",
    /** KilometersPerMillisecond */
    KilometersPerMillisecond = "KilometersPerMillisecond"
}

/** Known values of {@link StringIndexType} that the service accepts. */
export declare enum KnownStringIndexType {
    /** Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. */
    TextElementsV8 = "TextElements_v8",
    /** Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. */
    UnicodeCodePoint = "UnicodeCodePoint",
    /** Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript. */
    Utf16CodeUnit = "Utf16CodeUnit"
}

/** Known values of {@link SummaryAspect} that the service accepts. */
export declare enum KnownSummaryAspect {
    /** Issue */
    Issue = "issue",
    /** Resolution */
    Resolution = "resolution"
}

/** Known values of {@link TargetProjectKind} that the service accepts. */
export declare enum KnownTargetProjectKind {
    /** Luis */
    Luis = "Luis",
    /** Conversation */
    Conversation = "Conversation",
    /** QuestionAnswering */
    QuestionAnswering = "QuestionAnswering",
    /** NonLinked */
    NonLinked = "NonLinked"
}

/** Known values of {@link TaskState} that the service accepts. */
export declare enum KnownTaskState {
    /** NotStarted */
    NotStarted = "notStarted",
    /** Running */
    Running = "running",
    /** Succeeded */
    Succeeded = "succeeded",
    /** Failed */
    Failed = "failed",
    /** Cancelled */
    Cancelled = "cancelled",
    /** Cancelling */
    Cancelling = "cancelling"
}

/** Known values of {@link TemperatureUnit} that the service accepts. */
export declare enum KnownTemperatureUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Fahrenheit */
    Fahrenheit = "Fahrenheit",
    /** Kelvin */
    Kelvin = "Kelvin",
    /** Rankine */
    Rankine = "Rankine",
    /** Celsius */
    Celsius = "Celsius"
}

/** Known values of {@link TemporalModifier} that the service accepts. */
export declare enum KnownTemporalModifier {
    /** AfterApprox */
    AfterApprox = "AfterApprox",
    /** Before */
    Before = "Before",
    /** BeforeStart */
    BeforeStart = "BeforeStart",
    /** Approx */
    Approx = "Approx",
    /** ReferenceUndefined */
    ReferenceUndefined = "ReferenceUndefined",
    /** SinceEnd */
    SinceEnd = "SinceEnd",
    /** AfterMid */
    AfterMid = "AfterMid",
    /** Start */
    Start = "Start",
    /** After */
    After = "After",
    /** BeforeEnd */
    BeforeEnd = "BeforeEnd",
    /** Until */
    Until = "Until",
    /** End */
    End = "End",
    /** Less */
    Less = "Less",
    /** Since */
    Since = "Since",
    /** AfterStart */
    AfterStart = "AfterStart",
    /** BeforeApprox */
    BeforeApprox = "BeforeApprox",
    /** Mid */
    Mid = "Mid",
    /** More */
    More = "More"
}

/** Known values of {@link TranscriptContentType} that the service accepts. */
export declare enum KnownTranscriptContentType {
    /** Lexical */
    Lexical = "lexical",
    /** Itn */
    Itn = "itn",
    /** MaskedItn */
    MaskedItn = "maskedItn",
    /** Text */
    Text = "text"
}

/** Known values of {@link VolumeUnit} that the service accepts. */
export declare enum KnownVolumeUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** CubicMeter */
    CubicMeter = "CubicMeter",
    /** CubicCentimeter */
    CubicCentimeter = "CubicCentimeter",
    /** CubicMillimeter */
    CubicMillimeter = "CubicMillimeter",
    /** Hectoliter */
    Hectoliter = "Hectoliter",
    /** Decaliter */
    Decaliter = "Decaliter",
    /** Liter */
    Liter = "Liter",
    /** Centiliter */
    Centiliter = "Centiliter",
    /** Milliliter */
    Milliliter = "Milliliter",
    /** CubicYard */
    CubicYard = "CubicYard",
    /** CubicInch */
    CubicInch = "CubicInch",
    /** CubicFoot */
    CubicFoot = "CubicFoot",
    /** CubicMile */
    CubicMile = "CubicMile",
    /** FluidOunce */
    FluidOunce = "FluidOunce",
    /** Teaspoon */
    Teaspoon = "Teaspoon",
    /** Tablespoon */
    Tablespoon = "Tablespoon",
    /** Pint */
    Pint = "Pint",
    /** Quart */
    Quart = "Quart",
    /** Cup */
    Cup = "Cup",
    /** Gill */
    Gill = "Gill",
    /** Pinch */
    Pinch = "Pinch",
    /** FluidDram */
    FluidDram = "FluidDram",
    /** Barrel */
    Barrel = "Barrel",
    /** Minim */
    Minim = "Minim",
    /** Cord */
    Cord = "Cord",
    /** Peck */
    Peck = "Peck",
    /** Bushel */
    Bushel = "Bushel",
    /** Hogshead */
    Hogshead = "Hogshead"
}

/** Known values of {@link WeightUnit} that the service accepts. */
export declare enum KnownWeightUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Kilogram */
    Kilogram = "Kilogram",
    /** Gram */
    Gram = "Gram",
    /** Milligram */
    Milligram = "Milligram",
    /** Gallon */
    Gallon = "Gallon",
    /** MetricTon */
    MetricTon = "MetricTon",
    /** Ton */
    Ton = "Ton",
    /** Pound */
    Pound = "Pound",
    /** Ounce */
    Ounce = "Ounce",
    /** Grain */
    Grain = "Grain",
    /** PennyWeight */
    PennyWeight = "PennyWeight",
    /** LongTonBritish */
    LongTonBritish = "LongTonBritish",
    /** ShortTonUS */
    ShortTonUS = "ShortTonUS",
    /** ShortHundredWeightUS */
    ShortHundredWeightUS = "ShortHundredWeightUS",
    /** Stone */
    Stone = "Stone",
    /** Dram */
    Dram = "Dram"
}

/** Represents the length entity resolution model. */
export declare interface LengthResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Length";
    /** The length Unit of measurement */
    unit: LengthUnit;
}

/**
 * Defines values for LengthUnit.
 * {@link KnownLengthUnit} can be used interchangeably with LengthUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified**
 * **Kilometer**
 * **Hectometer**
 * **Decameter**
 * **Meter**
 * **Decimeter**
 * **Centimeter**
 * **Millimeter**
 * **Micrometer**
 * **Nanometer**
 * **Picometer**
 * **Mile**
 * **Yard**
 * **Inch**
 * **Foot**
 * **LightYear**
 * **Pt**
 */
export declare type LengthUnit = string;

/** The list key extra data kind. */
export declare interface ListKey extends BaseExtraInformation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    extraInformationKind: "ListKey";
    /** The canonical form of the extracted entity. */
    key?: string;
}

/**
 * Defines values for LogicalOperationKind.
 * {@link KnownLogicalOperationKind} can be used interchangeably with LogicalOperationKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AND**
 * **OR**
 */
export declare type LogicalOperationKind = string;

/** This customizes how the service calls LUIS Generally Available projects. */
export declare interface LuisCallingOptions {
    /** Enable verbose response. */
    verbose?: boolean;
    /** Save log to add in training utterances later. */
    log?: boolean;
    /** Set true to show all intents. */
    showAllIntents?: boolean;
    /** The timezone offset for the location of the request. */
    timezoneOffset?: number;
    /** Enable spell checking. */
    spellCheck?: boolean;
    /** The subscription key to use when enabling Bing spell check */
    bingSpellCheckSubscriptionKey?: string;
}

/** This is a set of request parameters for LUIS Generally Available projects. */
export declare interface LuisParameters extends AnalysisParameters {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "Luis";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The utterance to predict. */
    query?: string;
    /** This customizes how the service calls LUIS Generally Available projects. */
    callingOptions?: LuisCallingOptions;
}

/** It is a wrap up of LUIS Generally Available response. */
export declare interface LuisTargetIntentResult extends TargetIntentResult {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "Luis";
    /** The actual response from a LUIS Generally Available application. */
    result?: Record<string, ConversationPrediction>;
}

/** Find QnAs that are associated with the given list of metadata. */
export declare interface MetadataFilter {
    metadata?: MetadataRecord[];
    /** Operation used to join metadata filters. */
    logicalOperation?: LogicalOperationKind;
}

/** Object to provide the key value pair for each metadata. */
export declare interface MetadataRecord {
    /** Metadata Key from Metadata dictionary used in the QnA. */
    key: string;
    /** Metadata Value from Metadata dictionary used in the QnA. */
    value: string;
}

export declare interface MultiLanguageConversationAnalysisInput {
    conversations: ConversationUnion[];
}

/** A wrap up of non-linked intent response. */
export declare interface NoneLinkedTargetIntentResult extends TargetIntentResult {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "NonLinked";
    /** The actual response from a Conversation project. */
    result?: ConversationResult;
}

/**
 * Defines values for NumberKind.
 * {@link KnownNumberKind} can be used interchangeably with NumberKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Integer**
 * **Decimal**
 * **Power**
 * **Fraction**
 * **Percent**
 * **Unspecified**
 */
export declare type NumberKind = string;

/** A resolution for numeric entity instances. */
export declare interface NumberResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Number";
    /** The type of the extracted number entity. */
    numberKind: NumberKind;
    /** A numeric representation of what the extracted text denotes. */
    value: string;
}

/** represents the resolution of numeric intervals. */
export declare interface NumericRangeResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "NumericRange";
    /** The kind of range that the resolution object represents. */
    rangeKind: RangeKind;
    /** The beginning value of  the interval. */
    minimum: number;
    /** The ending value of the interval. */
    maximum: number;
}

/** This represents the prediction result of an Orchestration project. */
export declare interface OrchestrationPrediction extends BasePrediction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    projectKind: "Orchestration";
    /** A dictionary that contains all intents. A key is an intent name and a value is its confidence score and target type. The top intent's value also contains the actual response from the target project. */
    intents: {
        [propertyName: string]: TargetIntentResultUnion;
    };
}

/** A resolution for ordinal numbers entity instances. */
export declare interface OrdinalResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Ordinal";
    /** The offset With respect to the reference (e.g., offset = -1 in "show me the second to last" */
    offset: string;
    /** The reference point that the ordinal number denotes. */
    relativeTo: RelativeTo;
    /** A simple arithmetic expression that the ordinal denotes. */
    value: string;
}

export declare interface PreBuiltResult {
    /** Errors by document id. */
    errors: InputError[];
    /** if showStats=true was specified in the request this field will contain information about the request payload. */
    statistics?: RequestStatistics;
    /** This field indicates which model is used for scoring. */
    modelVersion: string;
}

/** Parameters object for a text analysis task using pre-built models. */
export declare interface PreBuiltTaskParameters extends TaskParameters {
    modelVersion?: string;
}

/**
 * Defines values for ProjectKind.
 * {@link KnownProjectKind} can be used interchangeably with ProjectKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Conversation**
 * **Orchestration**
 */
export declare type ProjectKind = string;

/** Represents resolutions for quantities. */
export declare interface QuantityResolution {
    /** The numeric value that the extracted text denotes. */
    value: number;
}

/** filters over knowledge base. */
export declare interface QueryFilters {
    /** Find QnAs that are associated with the given list of metadata. */
    metadataFilter?: MetadataFilter;
    /** Find QnAs that are associated with any of the given list of sources in knowledge base. */
    sourceFilter?: string[];
    /** Logical operation used to join metadata filter with source filter. */
    logicalOperation?: LogicalOperationKind;
}

/** This is a set of request parameters for Question Answering knowledge bases. */
export declare interface QuestionAnsweringParameters extends AnalysisParameters {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "QuestionAnswering";
    /** The options sent to a Question Answering KB. */
    callingOptions?: AnswersOptions;
}

/** It is a wrap up a Question Answering KB response. */
export declare interface QuestionAnsweringTargetIntentResult extends TargetIntentResult {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "QuestionAnswering";
    /** The generated answer by a Question Answering KB. */
    result?: AnswersResult;
}

/**
 * Defines values for RangeKind.
 * {@link KnownRangeKind} can be used interchangeably with RangeKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Number**
 * **Speed**
 * **Weight**
 * **Length**
 * **Volume**
 * **Area**
 * **Age**
 * **Information**
 * **Temperature**
 * **Currency**
 */
export declare type RangeKind = string;

/**
 * Defines values for RankerKind.
 * {@link KnownRankerKind} can be used interchangeably with RankerKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuestionOnly**: Question only ranker.
 * **Default**: Default ranker.
 */
export declare type RankerKind = string;

/** The transcript content response generated by the service with all necessary personally identifiable information redacted. */
export declare interface RedactedTranscriptContent {
    /** The redacted output for inverse text normalized format input. */
    itn?: string;
    /** The redacted output for masked inverse text normalized format input. */
    maskedItn?: string;
    /** The redacted output for text (Microsoft's Speech to Text 'display') format input. */
    text?: string;
    /** The redacted output for lexical format input. */
    lexical?: string;
    /** The list of redacted audio segments. */
    audioTimings?: AudioTiming[];
}

/**
 * Defines values for RelativeTo.
 * {@link KnownRelativeTo} can be used interchangeably with RelativeTo,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Current**
 * **End**
 * **Start**
 */
export declare type RelativeTo = string;

/** if showStats=true was specified in the request this field will contain information about the request payload. */
export declare interface RequestStatistics {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Number of transactions for the request. */
    transactionsCount: number;
}

/**
 * Defines values for ResolutionKind.
 * {@link KnownResolutionKind} can be used interchangeably with ResolutionKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Boolean**
 * **DateTime**
 * **Number**
 * **Ordinal**
 * **Speed**
 * **Weight**
 * **Length**
 * **Volume**
 * **Area**
 * **Age**
 * **Information**
 * **Temperature**
 * **Currency**
 * **NumericRange**
 * **TemporalSpan**
 */
export declare type ResolutionKind = string;

/**
 * Defines values for Role.
 * {@link KnownRole} can be used interchangeably with Role,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **agent**
 * **customer**
 * **generic**
 */
export declare type Role = string;

/** To configure Answer span prediction feature. */
export declare interface ShortAnswerOptions {
    /** Enable or disable Answer Span prediction. */
    enable: true;
    /** Minimum threshold score required to include an answer span, value ranges from 0 to 1. */
    confidenceThreshold?: number;
    /** Number of Top answers to be considered for span prediction from 1 to 10. */
    top?: number;
}

/** Represents the speed entity resolution model. */
export declare interface SpeedResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Speed";
    /** The speed Unit of measurement */
    unit: SpeedUnit;
}

/**
 * Defines values for SpeedUnit.
 * {@link KnownSpeedUnit} can be used interchangeably with SpeedUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified**
 * **MetersPerSecond**
 * **KilometersPerHour**
 * **KilometersPerMinute**
 * **KilometersPerSecond**
 * **MilesPerHour**
 * **Knot**
 * **FootPerSecond**
 * **FootPerMinute**
 * **YardsPerMinute**
 * **YardsPerSecond**
 * **MetersPerMillisecond**
 * **CentimetersPerMillisecond**
 * **KilometersPerMillisecond**
 */
export declare type SpeedUnit = string;

/**
 * Defines values for StringIndexType.
 * {@link KnownStringIndexType} can be used interchangeably with StringIndexType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TextElements_v8**: Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo.
 * **UnicodeCodePoint**: Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python.
 * **Utf16CodeUnit**: Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript.
 */
export declare type StringIndexType = string;

/**
 * Defines values for SummaryAspect.
 * {@link KnownSummaryAspect} can be used interchangeably with SummaryAspect,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **issue**
 * **resolution**
 */
export declare type SummaryAspect = string;

export declare interface SummaryResult extends PreBuiltResult {
    conversations: SummaryResultConversationsItem[];
}

export declare interface SummaryResultConversationsItem extends ConversationsSummaryResult, ConversationResultBase {
}

export declare interface SummaryResultItem {
    aspect: string;
    text: string;
}

/** This is the base class of an intent prediction */
export declare interface TargetIntentResult {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    targetProjectKind: "NonLinked" | "Conversation" | "Luis" | "QuestionAnswering";
    /** The API version used to call a target service. */
    apiVersion?: string;
    /** The prediction score and it ranges from 0.0 to 1.0. */
    confidence: number;
}

export declare type TargetIntentResultUnion = NoneLinkedTargetIntentResult | ConversationTargetIntentResult | LuisTargetIntentResult | QuestionAnsweringTargetIntentResult;

/**
 * Defines values for TargetProjectKind.
 * {@link KnownTargetProjectKind} can be used interchangeably with TargetProjectKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Luis**
 * **Conversation**
 * **QuestionAnswering**
 * **NonLinked**
 */
export declare type TargetProjectKind = string;

/** Base task object. */
export declare interface TaskIdentifier {
    taskName?: string;
}

/** Base parameters object for a text analysis task. */
export declare interface TaskParameters {
    loggingOptOut?: boolean;
}

/**
 * Defines values for TaskState.
 * {@link KnownTaskState} can be used interchangeably with TaskState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **notStarted**
 * **running**
 * **succeeded**
 * **failed**
 * **cancelled**
 * **cancelling**
 */
export declare type TaskState = string;

/** Returns the current state of the task. */
export declare interface TaskStateAutoGenerated {
    /** The last updated time in UTC for the task. */
    lastUpdateDateTime: Date;
    /** The status of the task at the mentioned last update time. */
    status: TaskState;
}

/** Represents the temperature entity resolution model. */
export declare interface TemperatureResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Temperature";
    /** The temperature Unit of measurement. */
    unit: TemperatureUnit;
}

/**
 * Defines values for TemperatureUnit.
 * {@link KnownTemperatureUnit} can be used interchangeably with TemperatureUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified**
 * **Fahrenheit**
 * **Kelvin**
 * **Rankine**
 * **Celsius**
 */
export declare type TemperatureUnit = string;

/**
 * Defines values for TemporalModifier.
 * {@link KnownTemporalModifier} can be used interchangeably with TemporalModifier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AfterApprox**
 * **Before**
 * **BeforeStart**
 * **Approx**
 * **ReferenceUndefined**
 * **SinceEnd**
 * **AfterMid**
 * **Start**
 * **After**
 * **BeforeEnd**
 * **Until**
 * **End**
 * **Less**
 * **Since**
 * **AfterStart**
 * **BeforeApprox**
 * **Mid**
 * **More**
 */
export declare type TemporalModifier = string;

/** represents the resolution of a date and/or time span. */
export declare interface TemporalSpanResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "TemporalSpan";
    /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
    begin?: string;
    /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
    end?: string;
    /** An optional duration value formatted based on the ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601#Durations) */
    duration?: string;
    /** An optional modifier of a date/time instance. */
    modifier?: TemporalModifier;
}

export declare interface TextConversation extends Conversation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    modality: "text";
    /** Ordered list of text conversation items in the conversation. */
    conversationItems: TextConversationItem[];
}

/** The text modality of an input conversation. */
export declare interface TextConversationItem extends ConversationItemBase {
    /** The text input */
    text: string;
}

/**
 * Defines values for TranscriptContentType.
 * {@link KnownTranscriptContentType} can be used interchangeably with TranscriptContentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **lexical**
 * **itn**
 * **maskedItn**
 * **text**
 */
export declare type TranscriptContentType = string;

export declare interface TranscriptConversation extends Conversation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    modality: "transcript";
    /** Ordered list of transcript conversation items in the conversation. */
    conversationItems: TranscriptConversationItem[];
}

/** Additional properties for supporting transcript conversation. */
export declare interface TranscriptConversationItem extends ConversationItemBase {
    /** Inverse Text Normalization representation of input. The inverse-text-normalized form is the recognized text from Microsoft’s Speech to Text API, with phone numbers, numbers, abbreviations, and other transformations applied. */
    itn?: string;
    /** The Inverse Text Normalized format with profanity masking applied. */
    maskedItn?: string;
    /** The display form of the recognized text from speech to text API, with punctuation and capitalization added. */
    text?: string;
    /** The lexical form of the recognized text from speech to text API with the actual words recognized. */
    lexical?: string;
    /** The list of word level audio timing information */
    audioTimings?: WordLevelTiming[];
}

/** Represents the volume entity resolution model. */
export declare interface VolumeResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Volume";
    /** The Volume Unit of measurement */
    unit: VolumeUnit;
}

/**
 * Defines values for VolumeUnit.
 * {@link KnownVolumeUnit} can be used interchangeably with VolumeUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified**
 * **CubicMeter**
 * **CubicCentimeter**
 * **CubicMillimeter**
 * **Hectoliter**
 * **Decaliter**
 * **Liter**
 * **Centiliter**
 * **Milliliter**
 * **CubicYard**
 * **CubicInch**
 * **CubicFoot**
 * **CubicMile**
 * **FluidOunce**
 * **Teaspoon**
 * **Tablespoon**
 * **Pint**
 * **Quart**
 * **Cup**
 * **Gill**
 * **Pinch**
 * **FluidDram**
 * **Barrel**
 * **Minim**
 * **Cord**
 * **Peck**
 * **Bushel**
 * **Hogshead**
 */
export declare type VolumeUnit = string;

/** Represents the weight entity resolution model. */
export declare interface WeightResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "Weight";
    /** The weight Unit of measurement. */
    unit: WeightUnit;
}

/**
 * Defines values for WeightUnit.
 * {@link KnownWeightUnit} can be used interchangeably with WeightUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified**
 * **Kilogram**
 * **Gram**
 * **Milligram**
 * **Gallon**
 * **MetricTon**
 * **Ton**
 * **Pound**
 * **Ounce**
 * **Grain**
 * **PennyWeight**
 * **LongTonBritish**
 * **ShortTonUS**
 * **ShortHundredWeightUS**
 * **Stone**
 * **Dram**
 */
export declare type WeightUnit = string;

/** Word level timing information generated by the speech to text API. The words in this object should have 1:1 correspondence with the 'lexical' input to allow for audio redaction. */
export declare interface WordLevelTiming extends AudioTiming {
    /** The word recognized. */
    word?: string;
}

export { }
