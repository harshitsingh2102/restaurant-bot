import * as coreClient from "@azure/core-client";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { ConversationAnalysisClientOptionalParams, AnalyzeConversationTaskUnion, AnalyzeConversationOptionalParams, AnalyzeConversationResponse, AnalyzeConversationJobsInput, ConversationAnalysisOptionalParams, ConversationAnalysisResponse } from "./models";
/** @internal */
export declare class ConversationAnalysisClient extends coreClient.ServiceClient {
    endpoint: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the ConversationAnalysisClient class.
     * @param endpoint Supported Cognitive Services endpoint (e.g.,
     *                 https://<resource-name>.api.cognitiveservices.azure.com).
     * @param options The parameter options
     */
    constructor(endpoint: string, options?: ConversationAnalysisClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Analyzes the input conversation utterance.
     * @param task A single conversational task to execute.
     * @param options The options parameters.
     */
    analyzeConversation(task: AnalyzeConversationTaskUnion, options?: AnalyzeConversationOptionalParams): Promise<AnalyzeConversationResponse>;
    /**
     * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.
     * @param task The collection of conversations to analyze and one or more tasks to execute.
     * @param options The options parameters.
     */
    beginConversationAnalysis(task: AnalyzeConversationJobsInput, options?: ConversationAnalysisOptionalParams): Promise<PollerLike<PollOperationState<ConversationAnalysisResponse>, ConversationAnalysisResponse>>;
    /**
     * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.
     * @param task The collection of conversations to analyze and one or more tasks to execute.
     * @param options The options parameters.
     */
    beginConversationAnalysisAndWait(task: AnalyzeConversationJobsInput, options?: ConversationAnalysisOptionalParams): Promise<ConversationAnalysisResponse>;
}
//# sourceMappingURL=conversationAnalysisClient.d.ts.map