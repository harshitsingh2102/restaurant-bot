{"version":3,"file":"sample_analyze_conversation_app.js","sourceRoot":"","sources":["../../samples-dev/sample_analyze_conversation_app.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;;GAMG;AAEH,OAAO,EAAE,0BAA0B,EAAsB,MAAM,kCAAkC,CAAC;AAClG,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AACtD,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAEjC,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,aAAa;AACb,yEAAyE;AACzE,MAAM,WAAW,GACf,OAAO,CAAC,GAAG,CAAC,4BAA4B,IAAI,mDAAmD,CAAC;AAClG,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,WAAW,CAAC;AAClE,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,gCAAgC,IAAI,gBAAgB,CAAC;AACrF,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,mCAAmC,IAAI,mBAAmB,CAAC;AAE9F,MAAM,OAAO,GAA+B,IAAI,0BAA0B,CACxE,WAAW,EACX,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAC/B,CAAC;AAEF,MAAM,IAAI,GAAuB;IAC/B,IAAI,EAAE,cAAc;IACpB,aAAa,EAAE;QACb,gBAAgB,EAAE;YAChB,EAAE,EAAE,UAAU;YACd,aAAa,EAAE,UAAU;YACzB,IAAI,EAAE,kDAAkD;SACzD;KACF;IACD,UAAU,EAAE;QACV,WAAW,EAAE,WAAW;QACxB,cAAc,EAAE,cAAc;KAC/B;CACF,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,IAAI;IACxB,eAAe;IACf,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC3D,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IACrC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAC7D,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAEzD,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;IACrC,IAAI,UAAU,CAAC,WAAW,IAAI,cAAc,EAAE;QAC5C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;QACpE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAEzB,KAAK,MAAM,MAAM,IAAI,UAAU,CAAC,QAAQ,EAAE;YACxC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC7C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;YACnC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAErD,IAAI,MAAM,CAAC,WAAW,EAAE;gBACtB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAC5B,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,WAAW,EAAE;oBAC3C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;oBACjD,IAAI,OAAO,IAAI,UAAU;wBAAE,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;iBACrE;aACF;YAED,IAAI,MAAM,CAAC,gBAAgB,EAAE;gBAC3B,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC3B,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,gBAAgB,EAAE;oBAC1C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;oBACjD,IAAI,IAAI,CAAC,oBAAoB,IAAI,SAAS;wBAAE,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC3E,IAAI,IAAI,CAAC,oBAAoB,IAAI,eAAe;wBAAE,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;iBACtF;aACF;SACF;KACF;AACH,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACnB,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * This sample demonstrates how to analyze user query for intents and entities using\n * a conversation project with a language parameter.\n *\n * @summary Conversational query analysis for intents and entities extraction\n * @azsdk-weight 50\n */\n\nimport { ConversationAnalysisClient, ConversationalTask } from \"@azure/ai-language-conversations\";\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\n//Get secrets\n//You will have to set these environment variables for the sample to work\nconst cluEndpoint =\n  process.env.AZURE_CONVERSATIONS_ENDPOINT || \"https://dummyendpoint.cognitiveservices.azure.com\";\nconst cluKey = process.env.AZURE_CONVERSATIONS_KEY || \"<api-key>\";\nconst projectName = process.env.AZURE_CONVERSATIONS_PROJECT_NAME || \"<project-name>\";\nconst deploymentName = process.env.AZURE_CONVERSATIONS_DEPLOYMENT_NAME || \"<deployment-name>\";\n\nconst service: ConversationAnalysisClient = new ConversationAnalysisClient(\n  cluEndpoint,\n  new AzureKeyCredential(cluKey)\n);\n\nconst body: ConversationalTask = {\n  kind: \"Conversation\",\n  analysisInput: {\n    conversationItem: {\n      id: \"id__7863\",\n      participantId: \"id__7863\",\n      text: \"Send an email to Carol about the tomorrow's demo\",\n    },\n  },\n  parameters: {\n    projectName: projectName,\n    deploymentName: deploymentName,\n  },\n};\n\nexport async function main() {\n  //Analyze query\n  const { result } = await service.analyzeConversation(body);\n  console.log(\"query: \", result.query);\n  console.log(\"project kind: \", result.prediction.projectKind);\n  console.log(\"top intent: \", result.prediction.topIntent);\n\n  const prediction = result.prediction;\n  if (prediction.projectKind == \"Conversation\") {\n    console.log(\"category: \", prediction.intents[0].category);\n    console.log(\"confidence score: \", prediction.intents[0].confidence);\n    console.log(\"entities:\");\n\n    for (const entity of prediction.entities) {\n      console.log(\"\\ncategory: \", entity.category);\n      console.log(\"text: \", entity.text);\n      console.log(\"confidence score: \", entity.confidence);\n\n      if (entity.resolutions) {\n        console.log(\"resolutions:\");\n        for (const resolution of entity.resolutions) {\n          console.log(\"kind: \", resolution.resolutionKind);\n          if (\"value\" in resolution) console.log(\"value: \", resolution.value);\n        }\n      }\n\n      if (entity.extraInformation) {\n        console.log(\"extra info:\");\n        for (const data of entity.extraInformation) {\n          console.log(\"kind: \", data.extraInformationKind);\n          if (data.extraInformationKind == \"ListKey\") console.log(\"key: \", data.key);\n          if (data.extraInformationKind == \"EntitySubtype\") console.log(\"value: \", data.value);\n        }\n      }\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n"]}