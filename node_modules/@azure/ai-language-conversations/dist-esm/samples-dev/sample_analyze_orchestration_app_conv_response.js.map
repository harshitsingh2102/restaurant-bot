{"version":3,"file":"sample_analyze_orchestration_app_conv_response.js","sourceRoot":"","sources":["../../samples-dev/sample_analyze_orchestration_app_conv_response.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * This sample demonstrates how to analyze user query using an orchestration project.\n * In this sample, orchestration project's top intent will map to a conversation project.\n *\n * @summary Orchestration project with conversational response\n * @azsdk-weight 50\n */\n\nimport { ConversationAnalysisClient, ConversationalTask } from \"@azure/ai-language-conversations\";\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\n//Get secrets\n//You will have to set these environment variables for the sample to work\nconst cluEndpoint =\n  process.env.AZURE_CONVERSATIONS_ENDPOINT || \"https://dummyendpoint.cognitiveservices.azure.com\";\nconst cluKey = process.env.AZURE_CONVERSATIONS_KEY || \"<api-key>\";\nconst projectName = process.env.AZURE_CONVERSATIONS_WORKFLOW_PROJECT_NAME || \"<project-name>\";\nconst deploymentName =\n  process.env.AZURE_CONVERSATIONS_WORKFLOW_DEPLOYMENT_NAME || \"<deployment-name>\";\n\nconst service: ConversationAnalysisClient = new ConversationAnalysisClient(\n  cluEndpoint,\n  new AzureKeyCredential(cluKey)\n);\n\nconst body: ConversationalTask = {\n  kind: \"Conversation\",\n  analysisInput: {\n    conversationItem: {\n      participantId: \"1\",\n      id: \"1\",\n      modality: \"text\",\n      language: \"en\",\n      text: \"Send an email to Carol about the tomorrow's demo\",\n    },\n  },\n  parameters: {\n    projectName: projectName,\n    deploymentName: deploymentName,\n    verbose: true,\n    isLoggingEnabled: false,\n  },\n};\n\nexport async function main() {\n  //Analyze query\n  const { result } = await service.analyzeConversation(body);\n  console.log(\"query: \", result.query);\n  console.log(\"project kind: \", result.prediction.projectKind);\n\n  const top_intent = result.prediction.topIntent || \"None\";\n  console.log(\"top intent: \", top_intent);\n\n  const prediction = result.prediction;\n  if (prediction.projectKind == \"Orchestration\") {\n    const top_intent_object = prediction.intents[top_intent];\n    console.log(\"confidence score: \", top_intent_object.confidence);\n    console.log(\"project kind: \", top_intent_object.targetProjectKind);\n\n    if (top_intent_object.targetProjectKind == \"Conversation\") {\n      console.log(\"\\nview conversation result:\");\n\n      if (top_intent_object.result && top_intent_object.result.prediction) {\n        console.log(\"\\ntop intent: \", top_intent_object.result.prediction.topIntent);\n\n        const intent = top_intent_object.result.prediction.intents[0];\n        console.log(\"category: \", intent.category);\n        console.log(\"confidence score: \", intent.confidence);\n\n        console.log(\"\\nview entities:\");\n        top_intent_object.result.prediction.entities.forEach((entity) => {\n          console.log(\"\\ncategory: \", entity.category);\n          console.log(\"text: \", entity.text);\n          console.log(\"confidence score: %f\", entity.confidence);\n\n          if (entity.resolutions) {\n            console.log(\"resolutions:\");\n            entity.resolutions.forEach((resolution) => {\n              console.log(\"kind: \", resolution.resolutionKind);\n              if (\"value\" in resolution) console.log(\"value: \", resolution.value);\n            });\n          }\n\n          if (entity.extraInformation) {\n            console.log(\"extra info:\");\n            for (const data of entity.extraInformation) {\n              console.log(\"kind: \", data.extraInformationKind);\n              if (data.extraInformationKind == \"ListKey\") console.log(\"key: \", data.key);\n              if (data.extraInformationKind == \"EntitySubtype\") console.log(\"value: \", data.value);\n            }\n          }\n        });\n      }\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n"]}