{"version":3,"file":"sample_conv_summarization.js","sourceRoot":"","sources":["../../samples-dev/sample_conv_summarization.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * This sample demonstrates how to analyze a conversation for issue resolution\n *\n * @summary Conversation Summarization\n * @azsdk-weight 50\n */\n\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { ConversationAnalysisClient } from \"@azure/ai-language-conversations\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\n//Get secrets\n//You will have to set these environment variables for the sample to work\nconst cluEndpoint =\n  process.env.AZURE_CONVERSATIONS_ENDPOINT || \"https://dummyendpoint.cognitiveservices.azure.com\";\nconst cluKey = process.env.AZURE_CONVERSATIONS_KEY || \"<api-key>\";\n\nconst service: ConversationAnalysisClient = new ConversationAnalysisClient(\n  cluEndpoint,\n  new AzureKeyCredential(cluKey)\n);\n\nexport async function main() {\n  //Analyze query\n  const poller = await service.beginConversationAnalysis({\n    displayName: \"Analyze conversations from xxx\",\n    analysisInput: {\n      conversations: [\n        {\n          conversationItems: [\n            {\n              text: \"Hello, how can I help you?\",\n              modality: \"text\",\n              id: \"1\",\n              participantId: \"Agent\",\n            },\n            {\n              text: \"How to upgrade Office? I am getting error messages the whole day.\",\n              modality: \"text\",\n              id: \"2\",\n              participantId: \"Customer\",\n            },\n            {\n              text: \"Press the upgrade button please. Then sign in and follow the instructions.\",\n              modality: \"text\",\n              id: \"3\",\n              participantId: \"Agent\",\n            },\n          ],\n          modality: \"text\",\n          id: \"conversation1\",\n          language: \"en\",\n        },\n      ],\n    },\n    tasks: [\n      {\n        taskName: \"analyze 1\",\n        kind: \"ConversationalSummarizationTask\",\n        parameters: {\n          summaryAspects: [\"Issue, Resolution\"],\n        },\n      },\n    ],\n  });\n\n  const actionResult = await poller.pollUntilDone();\n  if (actionResult.tasks.items === undefined) return;\n\n  const task_result = actionResult.tasks.items[0];\n  if (task_result.kind == \"conversationalSummarizationResults\") {\n    console.log(\"... view task status ...\");\n    console.log(\"status: %s\", task_result.status);\n    const resolution_result = task_result.results;\n    if (resolution_result.errors && resolution_result.errors.length != 0) {\n      console.log(\"... errors occured ...\");\n      for (const error of resolution_result.errors) {\n        console.log(error);\n      }\n    } else {\n      const conversation_result = resolution_result.conversations[0];\n      if (conversation_result.warnings && conversation_result.warnings.length != 0) {\n        console.log(\"... view warnings ...\");\n        for (const warning of conversation_result.warnings) {\n          console.log(warning);\n        }\n      } else {\n        const summaries = conversation_result.summaries;\n        console.log(\"... view task result ...\");\n        console.log(\"issue: %s\", summaries[0].text);\n        console.log(\"resolution: %s\", summaries[1].text);\n      }\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n"]}