{"version":3,"file":"sample_conv_pii_transcript_input.js","sourceRoot":"","sources":["../../samples-dev/sample_conv_pii_transcript_input.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * This sample demonstrates how to analyze a conversation for PII (personally identifiable information).\n *\n * @summary PII conversational analysis\n * @azsdk-weight 50\n */\n\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { ConversationAnalysisClient } from \"@azure/ai-language-conversations\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\n//Get secrets\n//You will have to set these environment variables for the sample to work\nconst cluEndpoint =\n  process.env.AZURE_CONVERSATIONS_ENDPOINT || \"https://dummyendpoint.cognitiveservices.azure.com\";\nconst cluKey = process.env.AZURE_CONVERSATIONS_KEY || \"<api-key>\";\n\nconst service: ConversationAnalysisClient = new ConversationAnalysisClient(\n  cluEndpoint,\n  new AzureKeyCredential(cluKey)\n);\n\nexport async function main() {\n  //Analyze query\n  const poller = await service.beginConversationAnalysis({\n    displayName: \"Analyze PII in conversation\",\n    analysisInput: {\n      conversations: [\n        {\n          conversationItems: [\n            {\n              id: \"1\",\n              participantId: \"0\",\n              modality: \"transcript\",\n              text: \"It is john doe.\",\n              lexical: \"It is john doe\",\n              itn: \"It is john doe\",\n              maskedItn: \"It is john doe\",\n            },\n            {\n              id: \"2\",\n              participantId: \"1\",\n              modality: \"transcript\",\n              text: \"Yes, 633-27-8199 is my phone\",\n              lexical: \"yes six three three two seven eight one nine nine is my phone\",\n              itn: \"yes 633278199 is my phone\",\n              maskedItn: \"yes 633278199 is my phone\",\n            },\n            {\n              id: \"3\",\n              participantId: \"1\",\n              modality: \"transcript\",\n              text: \"j.doe@yahoo.com is my email\",\n              lexical: \"j dot doe at yahoo dot com is my email\",\n              maskedItn: \"j.doe@yahoo.com is my email\",\n              itn: \"j.doe@yahoo.com is my email\",\n            },\n          ],\n          modality: \"transcript\",\n          id: \"1\",\n          language: \"en\",\n        },\n      ],\n    },\n    tasks: [\n      {\n        kind: \"ConversationalPIITask\",\n        parameters: {\n          redactionSource: \"lexical\",\n          piiCategories: [\"all\"],\n        },\n      },\n    ],\n  });\n  const actionResult = await poller.pollUntilDone();\n  if (actionResult.tasks.items === undefined) return;\n\n  const task_result = actionResult.tasks.items[0];\n  if (task_result.kind == \"conversationalPIIResults\") {\n    console.log(\"... view task status ...\");\n    console.log(\"status: \", task_result.status);\n    const conv_pii_result = task_result.results;\n    if (conv_pii_result.errors && conv_pii_result.errors.length != 0) {\n      console.log(\"... errors occured ...\");\n      for (const error of conv_pii_result.errors) {\n        console.log(error);\n      }\n    } else {\n      const conversation_result = conv_pii_result.conversations[0];\n      if (conversation_result.warnings && conversation_result.warnings.length != 0) {\n        console.log(\"... view warnings ...\");\n        for (const warning of conversation_result.warnings) {\n          console.log(warning);\n        }\n      } else {\n        console.log(\"... view task result ...\");\n        for (const conversation of conversation_result.conversationItems) {\n          console.log(\"conversation id: \", conversation.id);\n          console.log(\"... entities ...\");\n          for (const entity of conversation.entities) {\n            console.log(\"text: \", entity.text);\n            console.log(\"category: \", entity.category);\n            console.log(\"confidence: \", entity.confidenceScore);\n            console.log(\"offset: \", entity.offset);\n            console.log(\"length: \", entity.length);\n          }\n        }\n      }\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n"]}