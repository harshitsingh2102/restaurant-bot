{"version":3,"file":"conversationAnalysisClient.js","sourceRoot":"","sources":["../../src/conversationAnalysisClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAgBlC,OAAO,EAAE,uBAAuB,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AACnE,OAAO,EAAkC,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAErF,OAAO,EAAiB,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AACzE,OAAO,EAAE,0BAA0B,IAAI,eAAe,EAAE,MAAM,aAAa,CAAC;AAC5E,OAAO,EAAE,+BAA+B,EAAE,MAAM,2BAA2B,CAAC;AAC5E,OAAO,EAAE,4CAA4C,EAAE,MAAM,4BAA4B,CAAC;AAE1F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH,MAAM,OAAO,0BAA0B;IAIrC;;;;;OAKG;IACH,YACE,QAAgB,EAChB,UAA2C,EAC3C,UAAoD,EAAE;QAEtD,IAAI,CAAC,OAAO,GAAG,IAAI,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAEtD,IAAI,CAAC,QAAQ,GAAG,mBAAmB,CAAC;YAClC,WAAW,EAAE,kCAAkC;YAC/C,cAAc,EAAE,WAAW;YAC3B,SAAS,EAAE,6BAA6B;SACzC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,iBAAiB,CAAC,UAAU,CAAC;YAC9C,CAAC,CAAC,+BAA+B,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,uBAAuB,EAAE,CAAC;YAClF,CAAC,CAAC,4CAA4C,CAAC,UAAU,CAAC,CAAC;QAE7D,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CACjB,IAAkC,EAClC,OAA2C;QAE3C,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,gDAAgD,EAChD,OAAO,IAAI,EAAE,EACb,CAAC,cAAc,EAAE,EAAE,CACjB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAC9B,IAAI,EACJ,cAAc,CACyB,CAC5C,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,yBAAyB,CAC7B,IAAkC,EAClC,OAA4C;QAI5C,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,sDAAsD,EACtD,OAAO,IAAI,EAAE,EACb,CAAC,cAAc,EAAE,EAAE,CACjB,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,IAAI,EAAE,cAAc,CAE1D,CACJ,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n */\n\nimport {\n  AnalyzeConversationJobsInput,\n  AnalyzeConversationOptionalParams,\n  AnalyzeConversationResponse,\n  AnalyzeConversationTaskUnion,\n  ConversationAnalysisClientOptionalParams,\n  ConversationAnalysisOptionalParams,\n  ConversationAnalysisResponse,\n} from \"./models\";\nimport { DEFAULT_COGNITIVE_SCOPE, SDK_VERSION } from \"./constants\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport { TracingClient, createTracingClient } from \"@azure/core-tracing\";\nimport { ConversationAnalysisClient as GeneratedClient } from \"./generated\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport { conversationAnalysisAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\n\n/**\n * A client for interacting with the conversational language understanding\n * features in Azure Cognitive Language Service.\n *\n * The client needs the endpoint of a Language resource and an authentication\n * method such as an API key or AAD. The API key and endpoint can be found in\n * the Language resource page in the Azure portal. They will be located in the\n * resource's Keys and Endpoint page, under Resource Management.\n *\n * ### Examples for authentication:\n *\n * #### API Key\n *\n * ```js\n * import { AzureKeyCredential } from \"@azure/core-auth\";\n * import { ConversationAnalysisClient } from \"@azure/ai-language-conversations\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new AzureKeyCredential(\"<api key>\");\n *\n * const client = new ConversationAnalysisClient(endpoint, credential);\n * ```\n *\n * #### Azure Active Directory\n *\n * See the [`@azure/identity`](https://npmjs.com/package/\\@azure/identity)\n * package for more information about authenticating with Azure Active Directory.\n *\n * ```js\n * import { ConversationAnalysisClient } from \"@azure/ai-language-conversations\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new DefaultAzureCredential();\n *\n * const client = new ConversationAnalysisClient(endpoint, credential);\n * ```\n */\nexport class ConversationAnalysisClient {\n  private readonly _client: GeneratedClient;\n  private readonly _tracing: TracingClient;\n\n  /**\n   * Initializes a new instance of the ConversationAnalysisClient class.\n   * @param endpoint - Supported Cognitive Services endpoint (e.g.,\n   *                 https://<resource-name>.api.cognitiveservices.azure.com).\n   * @param options - The parameter options\n   */\n  constructor(\n    endpoint: string,\n    credential: TokenCredential | KeyCredential,\n    options: ConversationAnalysisClientOptionalParams = {}\n  ) {\n    this._client = new GeneratedClient(endpoint, options);\n\n    this._tracing = createTracingClient({\n      packageName: \"@azure/ai-language-conversations\",\n      packageVersion: SDK_VERSION,\n      namespace: \"Microsoft.CognitiveServices\",\n    });\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy({ credential, scopes: DEFAULT_COGNITIVE_SCOPE })\n      : conversationAnalysisAzureKeyCredentialPolicy(credential);\n\n    this._client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Analyzes the input conversation utterance.\n   * @param task - A single conversational task to execute.\n   * @param options - The options parameters.\n   */\n  analyzeConversation(\n    task: AnalyzeConversationTaskUnion,\n    options?: AnalyzeConversationOptionalParams\n  ): Promise<AnalyzeConversationResponse> {\n    return this._tracing.withSpan(\n      \"ConversationAnalysisClient.analyzeConversation\",\n      options || {},\n      (updatedOptions) =>\n        this._client.analyzeConversation(\n          task,\n          updatedOptions\n        ) as Promise<AnalyzeConversationResponse>\n    );\n  }\n\n  /**\n   * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.\n   * @param task - The collection of conversations to analyze and one or more tasks to execute.\n   * @param options - The options parameters.\n   */\n  async beginConversationAnalysis(\n    task: AnalyzeConversationJobsInput,\n    options?: ConversationAnalysisOptionalParams\n  ): Promise<\n    PollerLike<PollOperationState<ConversationAnalysisResponse>, ConversationAnalysisResponse>\n  > {\n    return this._tracing.withSpan(\n      \"ConversationAnalysisClient.beginConversationAnalysis\",\n      options || {},\n      (updatedOptions) =>\n        this._client.beginConversationAnalysis(task, updatedOptions) as Promise<\n          PollerLike<PollOperationState<ConversationAnalysisResponse>, ConversationAnalysisResponse>\n        >\n    );\n  }\n}\n"]}