{"version":3,"file":"recordedClient.js","sourceRoot":"","sources":["../../../../test/public/utils/recordedClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,0BAA0B,EAA+B,MAAM,eAAe,CAAC;AACxF,OAAO,EACL,QAAQ,EAER,yBAAyB,EACzB,GAAG,GACJ,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAEtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAEpE,MAAM,mBAAmB,GAA4B;IACnD,gBAAgB,EAAE,WAAW;IAC7B,iBAAiB;IACjB,oBAAoB,EAAE,WAAW;IACjC,QAAQ,EAAE,kBAAkB;IAC5B,yBAAyB,EAAE,gBAAgB;IAC3C,4BAA4B,EAAE,mBAAmB;IACjD,mCAAmC,EAAE,gBAAgB;IACrD,sCAAsC,EAAE,mBAAmB;CAC5D,CAAC;AAEF,MAAM,oBAAoB,GAAyB;IACjD,mBAAmB;CACpB,CAAC;AAIF,MAAM,UAAU,YAAY,CAAC,OAI5B;IACC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC;IAC7D,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,IAAI,4CAA4C,CAAC;IAC9E,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;IAEjG,QAAQ,UAAU,EAAE;QAClB,KAAK,QAAQ,CAAC,CAAC;YACb,OAAO,IAAI,0BAA0B,CACnC,QAAQ,EACR,IAAI,kBAAkB,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,CAAC,EACrE,cAAc,CACf,CAAC;SACH;QACD,KAAK,KAAK,CAAC,CAAC;YACV,OAAO,IAAI,0BAA0B,CAAC,QAAQ,EAAE,oBAAoB,EAAE,EAAE,cAAc,CAAC,CAAC;SACzF;QACD,KAAK,aAAa,CAAC,CAAC;YAClB,OAAO,IAAI,0BAA0B,CACnC,QAAQ,EACR,IAAI,kBAAkB,CAAC,UAAU,CAAC,EAClC,cAAc,CACf,CAAC;SACH;QACD,OAAO,CAAC,CAAC;YACP,MAAM,KAAK,CAAC,sCAAsC,UAAU,EAAE,CAAC,CAAC;SACjE;KACF;AACH,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,WAAkB;IACpD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC;IAC3C,MAAM,QAAQ,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC3C,MAAM,QAAQ,CAAC,UAAU,CAAC,sBAAsB,EAAE,EAAE,eAAe,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;IAC5F,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ConversationAnalysisClient, ConversationAnalysisOptions } from \"../../../src/\";\nimport {\n  Recorder,\n  RecorderStartOptions,\n  assertEnvironmentVariable,\n  env,\n} from \"@azure-tools/test-recorder\";\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { Test } from \"mocha\";\nimport { createTestCredential } from \"@azure-tools/test-credential\";\n\nconst envSetupForPlayback: { [k: string]: string } = {\n  LANGUAGE_API_KEY: \"sanitized\",\n  // Second API key\n  LANGUAGE_API_KEY_ALT: \"sanitized\",\n  ENDPOINT: \"https://endpoint\",\n  LANGUAGE_CLU_PROJECT_NAME: \"<project-name>\",\n  LANGUAGE_CLU_DEPLOYMENT_NAME: \"<deployment-name>\",\n  LANGUAGE_ORCHESTRATION_PROJECT_NAME: \"<project-name>\",\n  LANGUAGE_ORCHESTRATION_DEPLOYMENT_NAME: \"<deployment-name>\",\n};\n\nconst recorderStartOptions: RecorderStartOptions = {\n  envSetupForPlayback,\n};\n\nexport type AuthMethod = \"APIKey\" | \"AAD\" | \"DummyAPIKey\";\n\nexport function createClient(options: {\n  authMethod: AuthMethod;\n  recorder?: Recorder;\n  clientOptions?: ConversationAnalysisOptions;\n}): ConversationAnalysisClient {\n  const { authMethod, recorder, clientOptions = {} } = options;\n  const endpoint = env.ENDPOINT || \"https://dummy.cognitiveservices.azure.com/\";\n  const updatedOptions = recorder ? recorder.configureClientOptions(clientOptions) : clientOptions;\n\n  switch (authMethod) {\n    case \"APIKey\": {\n      return new ConversationAnalysisClient(\n        endpoint,\n        new AzureKeyCredential(assertEnvironmentVariable(\"LANGUAGE_API_KEY\")),\n        updatedOptions\n      );\n    }\n    case \"AAD\": {\n      return new ConversationAnalysisClient(endpoint, createTestCredential(), updatedOptions);\n    }\n    case \"DummyAPIKey\": {\n      return new ConversationAnalysisClient(\n        endpoint,\n        new AzureKeyCredential(\"whatever\"),\n        updatedOptions\n      );\n    }\n    default: {\n      throw Error(`Unsupported authentication method: ${authMethod}`);\n    }\n  }\n}\n\n/**\n * starts the recorder and reads the environment variables from the `.env` file.\n * Should be called first in the test suite to make sure environment variables are\n * read before they are being used.\n */\nexport async function startRecorder(currentTest?: Test): Promise<Recorder> {\n  const recorder = new Recorder(currentTest);\n  await recorder.start(recorderStartOptions);\n  await recorder.setMatcher(\"CustomDefaultMatcher\", { excludedHeaders: [\"Accept-Language\"] });\n  return recorder;\n}\n"]}