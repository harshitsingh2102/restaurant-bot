{"version":3,"file":"analyze.spec.js","sourceRoot":"","sources":["../../../test/public/analyze.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AuthMethod, createClient, startRecorder } from \"./utils/recordedClient\";\nimport { Context, Suite } from \"mocha\";\nimport { assert, matrix } from \"@azure/test-utils\";\nimport { conv1, conv2, conv3, conv4, conv5, conv6 } from \"./inputs\";\nimport { ConversationAnalysisClient } from \"../../src\";\nimport { Recorder } from \"@azure-tools/test-recorder\";\n\nmatrix([[\"APIKey\"]] as const, async (authMethod: AuthMethod) => {\n  describe(`[${authMethod}] ConversationAnalysisClient`, function (this: Suite) {\n    let recorder: Recorder;\n    let client: ConversationAnalysisClient;\n\n    beforeEach(async function (this: Context) {\n      recorder = await startRecorder(this.currentTest);\n      client = createClient({\n        authMethod,\n        recorder,\n      });\n    });\n\n    afterEach(async function () {\n      await recorder.stop();\n    });\n\n    describe(\"#sync\", () => {\n      it(\"Test Conversation App\", async function () {\n        const message = await client.analyzeConversation(conv1);\n        // Assert prediction type\n        assert.equal(message.kind, \"ConversationResult\");\n        assert.exists(message.result.query);\n        if (message.result.prediction.projectKind !== \"Conversation\") {\n          assert.fail(\"Expected a Conversation prediction\");\n        }\n        // Assert top intent\n        assert.equal(message.result.prediction.topIntent, \"Send\");\n        assert.isAtLeast(message.result.prediction.intents.length, 1);\n        assert.equal(message.result.prediction.intents[0].category, \"Send\");\n        assert.isAbove(message.result.prediction.intents[0].confidence, 0);\n\n        // Assert entities\n        assert.isAtLeast(message.result.prediction.entities.length, 1);\n        assert.equal(message.result.prediction.entities[0].category, \"Contact\");\n        assert.equal(message.result.prediction.entities[0].text, \"Carol\");\n        assert.isAbove(message.result.prediction.entities[0].confidence, 0);\n      });\n\n      it(\"Test Orchestration App Conversational Response\", async function () {\n        const message = await client.analyzeConversation(conv2);\n        // Assert prediction type\n        assert.equal(message.kind, \"ConversationResult\");\n        assert.exists(message.result.query);\n        if (message.result.prediction.projectKind !== \"Orchestration\") {\n          assert.fail(\"Expected an Orchestration prediction\");\n        }\n        // Assert top matching project\n        assert.equal(message.result.prediction.topIntent, \"EmailIntent\");\n        assert.exists(message.result.prediction.intents.EmailIntent);\n        const top_intent_object = message.result.prediction.intents.EmailIntent;\n\n        if (\n          top_intent_object.targetProjectKind !== \"Conversation\" ||\n          top_intent_object.result?.prediction === undefined\n        ) {\n          assert.fail(\"Expected a Conversational response\");\n        }\n        // Assert intent\n        const conversation_result = top_intent_object.result.prediction;\n        assert.equal(conversation_result.topIntent, \"Send\");\n        assert.isAtLeast(conversation_result.intents.length, 1);\n        assert.equal(conversation_result.intents[0].category, \"Send\");\n        assert.isAbove(conversation_result.intents[0].confidence, 0);\n\n        // Assert entities\n        assert.isAtLeast(conversation_result.entities.length, 1);\n        assert.equal(conversation_result.entities[0].category, \"Contact\");\n        assert.equal(conversation_result.entities[0].text, \"Carol\");\n        assert.isAbove(conversation_result.entities[0].confidence, 0);\n      });\n\n      it.skip(\"Test Orchestration App LUIS Response\", async function () {\n        const message = await client.analyzeConversation(conv3);\n        // Assert prediction type\n        assert.equal(message.kind, \"ConversationResult\");\n        assert.exists(message.result.query);\n\n        if (message.result.prediction.projectKind !== \"Orchestration\") {\n          assert.fail(\"Expected an Orchestration prediction\");\n        }\n        // Assert top matching project\n        assert.equal(message.result.prediction.topIntent, \"RestaurantIntent\");\n        assert.exists(message.result.prediction.intents.RestaurantIntent);\n        const top_intent_object = message.result.prediction.intents.RestaurantIntent;\n        assert.equal(top_intent_object.targetProjectKind, \"Luis\");\n\n        // Assert intent\n        if (\n          top_intent_object.targetProjectKind !== \"Luis\" ||\n          top_intent_object.result?.prediction === undefined\n        ) {\n          assert.fail(\"Expected a LUIS response\");\n        }\n        const luis_result = top_intent_object.result.prediction;\n        assert.equal(luis_result.topIntent, \"Reserve\");\n        assert.isAtLeast(luis_result.intents.length, 1);\n        assert.isAbove(luis_result.intents[0].confidence, 0);\n\n        // Assert entities\n        assert.isAtLeast(luis_result.entities.length, 1);\n      });\n\n      it(\"Test Orchestration App QnA Response\", async function () {\n        const message = await client.analyzeConversation(conv4);\n        // Assert prediction type\n        assert.equal(message.kind, \"ConversationResult\");\n        assert.exists(message.result.query);\n        if (message.result.prediction.projectKind !== \"Orchestration\") {\n          assert.fail(\"Expected an Orchestration prediction\");\n        }\n\n        // Assert top matching project\n        assert.equal(message.result.prediction.topIntent, \"ChitChat-QnA\");\n        assert.exists(message.result.prediction.intents[\"ChitChat-QnA\"]);\n        const top_intent_object = message.result.prediction.intents[\"ChitChat-QnA\"];\n        assert.equal(top_intent_object.targetProjectKind, \"QuestionAnswering\");\n\n        // Assert intent\n        if (\n          top_intent_object.targetProjectKind !== \"QuestionAnswering\" ||\n          top_intent_object.result?.answers === undefined\n        ) {\n          assert.fail(\"Expected a QnA response\");\n        }\n        assert.exists(top_intent_object.result.answers[0].answer);\n        assert.isAbove(top_intent_object.result.answers[0].confidence || 0, 0);\n      });\n    });\n\n    describe(\"#async\", () => {\n      it(\"Test Conversation App PII transcript\", async function () {\n        const poller = await client.beginConversationAnalysis(conv5);\n        const message = await poller.pollUntilDone();\n        // Assert main object\n        assert.equal(message.status, \"succeeded\");\n\n        // Assert task result\n        if (\n          message.tasks.items === undefined ||\n          message.tasks.items[0].kind !== \"conversationalPIIResults\"\n        ) {\n          assert.fail(\"Expected a Conversational PII result\");\n        }\n\n        const task_result = message.tasks.items[0];\n        assert.equal(task_result.status, \"succeeded\");\n        assert.equal(task_result.kind, \"conversationalPIIResults\");\n\n        // Assert Conversation Result\n        const conversation_items = task_result.results.conversations[0].conversationItems;\n        assert.exists(conversation_items);\n        conversation_items.forEach((conversation) => {\n          assert.exists(conversation.redactedContent);\n          assert.exists(conversation.entities);\n        });\n      });\n\n      it(\"Test Conversation Summarization App\", async function () {\n        const poller = await client.beginConversationAnalysis(conv6);\n        const message = await poller.pollUntilDone();\n        // Assert main object\n        assert.equal(message.status, \"succeeded\");\n\n        // Assert task result\n        if (\n          message.tasks.items === undefined ||\n          message.tasks.items[0].kind !== \"conversationalSummarizationResults\"\n        ) {\n          assert.fail(\"Expected a Conversational Summarization result\");\n        }\n\n        const task_result = message.tasks.items[0];\n        assert.equal(task_result.status, \"succeeded\");\n\n        // Assert Conversation Result\n        const conversation_result = task_result.results.conversations[0];\n        assert.exists(conversation_result.summaries);\n      });\n    });\n  });\n});\n"]}