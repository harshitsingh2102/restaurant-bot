'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreAuth = require('@azure/core-auth');
var coreTracing = require('@azure/core-tracing');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreClient = require('@azure/core-client');
var coreLro = require('@azure/core-lro');
var tslib = require('tslib');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);
var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const DEFAULT_COGNITIVE_SCOPE = "https://cognitiveservices.azure.com/.default";
const SDK_VERSION = "1.0.0-beta.1";

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    async sendInitialRequest() {
        return this.sendOperationFn(this.args, this.spec);
    }
    async sendPollRequest(path) {
        const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
        return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AnalyzeConversationTask = {
    type: {
        name: "Composite",
        className: "AnalyzeConversationTask",
        uberParent: "AnalyzeConversationTask",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AnalyzeConversationTaskResult = {
    type: {
        name: "Composite",
        className: "AnalyzeConversationTaskResult",
        uberParent: "AnalyzeConversationTaskResult",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorModel"
                        }
                    }
                }
            },
            innererror: {
                serializedName: "innererror",
                type: {
                    name: "Composite",
                    className: "InnerErrorModel"
                }
            }
        }
    }
};
const InnerErrorModel = {
    type: {
        name: "Composite",
        className: "InnerErrorModel",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            innererror: {
                serializedName: "innererror",
                type: {
                    name: "Composite",
                    className: "InnerErrorModel"
                }
            }
        }
    }
};
const AnalyzeConversationJobsInput = {
    type: {
        name: "Composite",
        className: "AnalyzeConversationJobsInput",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "MultiLanguageConversationAnalysisInput"
                }
            },
            tasks: {
                serializedName: "tasks",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AnalyzeConversationLROTask"
                        }
                    }
                }
            }
        }
    }
};
const MultiLanguageConversationAnalysisInput = {
    type: {
        name: "Composite",
        className: "MultiLanguageConversationAnalysisInput",
        modelProperties: {
            conversations: {
                serializedName: "conversations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Conversation"
                        }
                    }
                }
            }
        }
    }
};
const Conversation = {
    type: {
        name: "Composite",
        className: "Conversation",
        uberParent: "Conversation",
        polymorphicDiscriminator: {
            serializedName: "modality",
            clientName: "modality"
        },
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            language: {
                serializedName: "language",
                required: true,
                type: {
                    name: "String"
                }
            },
            modality: {
                serializedName: "modality",
                required: true,
                type: {
                    name: "String"
                }
            },
            domain: {
                serializedName: "domain",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TaskIdentifier = {
    type: {
        name: "Composite",
        className: "TaskIdentifier",
        modelProperties: {
            taskName: {
                serializedName: "taskName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobStateAutoGenerated = {
    type: {
        name: "Composite",
        className: "JobStateAutoGenerated",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            createdDateTime: {
                serializedName: "createdDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            expirationDateTime: {
                serializedName: "expirationDateTime",
                type: {
                    name: "DateTime"
                }
            },
            jobId: {
                serializedName: "jobId",
                required: true,
                type: {
                    name: "String"
                }
            },
            lastUpdatedDateTime: {
                serializedName: "lastUpdatedDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorModel"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConversationTasksState = {
    type: {
        name: "Composite",
        className: "ConversationTasksState",
        modelProperties: {
            tasks: {
                serializedName: "tasks",
                type: {
                    name: "Composite",
                    className: "ConversationTasksStateTasks"
                }
            }
        }
    }
};
const ConversationTasksStateTasks = {
    type: {
        name: "Composite",
        className: "ConversationTasksStateTasks",
        modelProperties: {
            completed: {
                serializedName: "completed",
                required: true,
                type: {
                    name: "Number"
                }
            },
            failed: {
                serializedName: "failed",
                required: true,
                type: {
                    name: "Number"
                }
            },
            inProgress: {
                serializedName: "inProgress",
                required: true,
                type: {
                    name: "Number"
                }
            },
            total: {
                serializedName: "total",
                required: true,
                type: {
                    name: "Number"
                }
            },
            items: {
                serializedName: "items",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AnalyzeConversationJobResult"
                        }
                    }
                }
            }
        }
    }
};
const TaskStateAutoGenerated = {
    type: {
        name: "Composite",
        className: "TaskStateAutoGenerated",
        modelProperties: {
            lastUpdateDateTime: {
                serializedName: "lastUpdateDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AnalyzeConversationJobStatistics = {
    type: {
        name: "Composite",
        className: "AnalyzeConversationJobStatistics",
        modelProperties: {
            statistics: {
                serializedName: "statistics",
                type: {
                    name: "Composite",
                    className: "ConversationRequestStatistics"
                }
            }
        }
    }
};
const RequestStatistics = {
    type: {
        name: "Composite",
        className: "RequestStatistics",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            transactionsCount: {
                serializedName: "transactionsCount",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ConversationAnalysisOptions = {
    type: {
        name: "Composite",
        className: "ConversationAnalysisOptions",
        modelProperties: {
            conversationItem: {
                serializedName: "conversationItem",
                type: {
                    name: "Composite",
                    className: "ConversationItemBase"
                }
            }
        }
    }
};
const ConversationItemBase = {
    type: {
        name: "Composite",
        className: "ConversationItemBase",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            participantId: {
                serializedName: "participantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            modality: {
                serializedName: "modality",
                type: {
                    name: "String"
                }
            },
            role: {
                serializedName: "role",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConversationTaskParameters = {
    type: {
        name: "Composite",
        className: "ConversationTaskParameters",
        modelProperties: {
            projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            deploymentName: {
                serializedName: "deploymentName",
                required: true,
                type: {
                    name: "String"
                }
            },
            verbose: {
                serializedName: "verbose",
                type: {
                    name: "Boolean"
                }
            },
            isLoggingEnabled: {
                serializedName: "isLoggingEnabled",
                type: {
                    name: "Boolean"
                }
            },
            stringIndexType: {
                defaultValue: "TextElements_v8",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            },
            directTarget: {
                serializedName: "directTarget",
                type: {
                    name: "String"
                }
            },
            targetProjectParameters: {
                serializedName: "targetProjectParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "AnalysisParameters" }
                    }
                }
            }
        }
    }
};
const AnalysisParameters = {
    type: {
        name: "Composite",
        className: "AnalysisParameters",
        uberParent: "AnalysisParameters",
        polymorphicDiscriminator: {
            serializedName: "targetProjectKind",
            clientName: "targetProjectKind"
        },
        modelProperties: {
            targetProjectKind: {
                serializedName: "targetProjectKind",
                required: true,
                type: {
                    name: "String"
                }
            },
            apiVersion: {
                serializedName: "apiVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AnalyzeConversationResult = {
    type: {
        name: "Composite",
        className: "AnalyzeConversationResult",
        modelProperties: {
            query: {
                serializedName: "query",
                required: true,
                type: {
                    name: "String"
                }
            },
            detectedLanguage: {
                serializedName: "detectedLanguage",
                type: {
                    name: "String"
                }
            },
            prediction: {
                serializedName: "prediction",
                type: {
                    name: "Composite",
                    className: "BasePrediction"
                }
            }
        }
    }
};
const BasePrediction = {
    type: {
        name: "Composite",
        className: "BasePrediction",
        uberParent: "BasePrediction",
        polymorphicDiscriminator: {
            serializedName: "projectKind",
            clientName: "projectKind"
        },
        modelProperties: {
            projectKind: {
                serializedName: "projectKind",
                required: true,
                type: {
                    name: "String"
                }
            },
            topIntent: {
                serializedName: "topIntent",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConversationResult = {
    type: {
        name: "Composite",
        className: "ConversationResult",
        modelProperties: {
            query: {
                serializedName: "query",
                required: true,
                type: {
                    name: "String"
                }
            },
            detectedLanguage: {
                serializedName: "detectedLanguage",
                type: {
                    name: "String"
                }
            },
            prediction: {
                serializedName: "prediction",
                type: {
                    name: "Composite",
                    className: "ConversationPrediction"
                }
            }
        }
    }
};
const ConversationIntent = {
    type: {
        name: "Composite",
        className: "ConversationIntent",
        modelProperties: {
            category: {
                serializedName: "category",
                required: true,
                type: {
                    name: "String"
                }
            },
            confidence: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ConversationEntity = {
    type: {
        name: "Composite",
        className: "ConversationEntity",
        modelProperties: {
            category: {
                serializedName: "category",
                required: true,
                type: {
                    name: "String"
                }
            },
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            },
            confidence: {
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            },
            resolutions: {
                serializedName: "resolutions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BaseResolution"
                        }
                    }
                }
            },
            extraInformation: {
                serializedName: "extraInformation",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BaseExtraInformation"
                        }
                    }
                }
            }
        }
    }
};
const BaseResolution = {
    type: {
        name: "Composite",
        className: "BaseResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: {
            serializedName: "resolutionKind",
            clientName: "resolutionKind"
        },
        modelProperties: {
            resolutionKind: {
                serializedName: "resolutionKind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BaseExtraInformation = {
    type: {
        name: "Composite",
        className: "BaseExtraInformation",
        uberParent: "BaseExtraInformation",
        polymorphicDiscriminator: {
            serializedName: "extraInformationKind",
            clientName: "extraInformationKind"
        },
        modelProperties: {
            extraInformationKind: {
                serializedName: "extraInformationKind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetIntentResult = {
    type: {
        name: "Composite",
        className: "TargetIntentResult",
        uberParent: "TargetIntentResult",
        polymorphicDiscriminator: {
            serializedName: "targetProjectKind",
            clientName: "targetProjectKind"
        },
        modelProperties: {
            targetProjectKind: {
                serializedName: "targetProjectKind",
                required: true,
                type: {
                    name: "String"
                }
            },
            apiVersion: {
                serializedName: "apiVersion",
                type: {
                    name: "String"
                }
            },
            confidence: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const LuisCallingOptions = {
    type: {
        name: "Composite",
        className: "LuisCallingOptions",
        modelProperties: {
            verbose: {
                serializedName: "verbose",
                type: {
                    name: "Boolean"
                }
            },
            log: {
                serializedName: "log",
                type: {
                    name: "Boolean"
                }
            },
            showAllIntents: {
                serializedName: "show-all-intents",
                type: {
                    name: "Boolean"
                }
            },
            timezoneOffset: {
                serializedName: "timezoneOffset",
                type: {
                    name: "Number"
                }
            },
            spellCheck: {
                serializedName: "spellCheck",
                type: {
                    name: "Boolean"
                }
            },
            bingSpellCheckSubscriptionKey: {
                serializedName: "bing-spell-check-subscription-key",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConversationCallingOptions = {
    type: {
        name: "Composite",
        className: "ConversationCallingOptions",
        modelProperties: {
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            verbose: {
                serializedName: "verbose",
                type: {
                    name: "Boolean"
                }
            },
            isLoggingEnabled: {
                serializedName: "isLoggingEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const AnswersOptions = {
    type: {
        name: "Composite",
        className: "AnswersOptions",
        modelProperties: {
            qnaId: {
                serializedName: "qnaId",
                type: {
                    name: "Number"
                }
            },
            question: {
                serializedName: "question",
                type: {
                    name: "String"
                }
            },
            top: {
                serializedName: "top",
                type: {
                    name: "Number"
                }
            },
            userId: {
                serializedName: "userId",
                type: {
                    name: "String"
                }
            },
            confidenceThreshold: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "confidenceScoreThreshold",
                type: {
                    name: "Number"
                }
            },
            answerContext: {
                serializedName: "context",
                type: {
                    name: "Composite",
                    className: "KnowledgeBaseAnswerContext"
                }
            },
            rankerKind: {
                serializedName: "rankerType",
                type: {
                    name: "String"
                }
            },
            filters: {
                serializedName: "filters",
                type: {
                    name: "Composite",
                    className: "QueryFilters"
                }
            },
            shortAnswerOptions: {
                serializedName: "answerSpanRequest",
                type: {
                    name: "Composite",
                    className: "ShortAnswerOptions"
                }
            },
            includeUnstructuredSources: {
                serializedName: "includeUnstructuredSources",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const KnowledgeBaseAnswerContext = {
    type: {
        name: "Composite",
        className: "KnowledgeBaseAnswerContext",
        modelProperties: {
            previousQnaId: {
                serializedName: "previousQnaId",
                required: true,
                type: {
                    name: "Number"
                }
            },
            previousQuestion: {
                serializedName: "previousUserQuery",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QueryFilters = {
    type: {
        name: "Composite",
        className: "QueryFilters",
        modelProperties: {
            metadataFilter: {
                serializedName: "metadataFilter",
                type: {
                    name: "Composite",
                    className: "MetadataFilter"
                }
            },
            sourceFilter: {
                serializedName: "sourceFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            logicalOperation: {
                serializedName: "logicalOperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataFilter = {
    type: {
        name: "Composite",
        className: "MetadataFilter",
        modelProperties: {
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataRecord"
                        }
                    }
                }
            },
            logicalOperation: {
                serializedName: "logicalOperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataRecord = {
    type: {
        name: "Composite",
        className: "MetadataRecord",
        modelProperties: {
            key: {
                serializedName: "key",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ShortAnswerOptions = {
    type: {
        name: "Composite",
        className: "ShortAnswerOptions",
        modelProperties: {
            enable: {
                defaultValue: true,
                isConstant: true,
                serializedName: "enable",
                type: {
                    name: "Boolean"
                }
            },
            confidenceThreshold: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "confidenceScoreThreshold",
                type: {
                    name: "Number"
                }
            },
            top: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "topAnswersWithSpan",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const QuantityResolution = {
    type: {
        name: "Composite",
        className: "QuantityResolution",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AnswersResult = {
    type: {
        name: "Composite",
        className: "AnswersResult",
        modelProperties: {
            answers: {
                serializedName: "answers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KnowledgeBaseAnswer"
                        }
                    }
                }
            }
        }
    }
};
const KnowledgeBaseAnswer = {
    type: {
        name: "Composite",
        className: "KnowledgeBaseAnswer",
        modelProperties: {
            questions: {
                serializedName: "questions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            answer: {
                serializedName: "answer",
                type: {
                    name: "String"
                }
            },
            confidence: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "confidenceScore",
                type: {
                    name: "Number"
                }
            },
            qnaId: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            dialog: {
                serializedName: "dialog",
                type: {
                    name: "Composite",
                    className: "KnowledgeBaseAnswerDialog"
                }
            },
            shortAnswer: {
                serializedName: "answerSpan",
                type: {
                    name: "Composite",
                    className: "AnswerSpan"
                }
            }
        }
    }
};
const KnowledgeBaseAnswerDialog = {
    type: {
        name: "Composite",
        className: "KnowledgeBaseAnswerDialog",
        modelProperties: {
            isContextOnly: {
                serializedName: "isContextOnly",
                type: {
                    name: "Boolean"
                }
            },
            prompts: {
                constraints: {
                    MaxItems: 20
                },
                serializedName: "prompts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KnowledgeBaseAnswerPrompt"
                        }
                    }
                }
            }
        }
    }
};
const KnowledgeBaseAnswerPrompt = {
    type: {
        name: "Composite",
        className: "KnowledgeBaseAnswerPrompt",
        modelProperties: {
            displayOrder: {
                serializedName: "displayOrder",
                type: {
                    name: "Number"
                }
            },
            qnaId: {
                serializedName: "qnaId",
                type: {
                    name: "Number"
                }
            },
            displayText: {
                constraints: {
                    MaxLength: 200
                },
                serializedName: "displayText",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AnswerSpan = {
    type: {
        name: "Composite",
        className: "AnswerSpan",
        modelProperties: {
            text: {
                serializedName: "text",
                type: {
                    name: "String"
                }
            },
            confidence: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "confidenceScore",
                type: {
                    name: "Number"
                }
            },
            offset: {
                serializedName: "offset",
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const TaskParameters = {
    type: {
        name: "Composite",
        className: "TaskParameters",
        modelProperties: {
            loggingOptOut: {
                defaultValue: false,
                serializedName: "loggingOptOut",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ConversationPIIItemResult = {
    type: {
        name: "Composite",
        className: "ConversationPIIItemResult",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            redactedContent: {
                serializedName: "redactedContent",
                type: {
                    name: "Composite",
                    className: "RedactedTranscriptContent"
                }
            },
            entities: {
                serializedName: "entities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Entity"
                        }
                    }
                }
            }
        }
    }
};
const RedactedTranscriptContent = {
    type: {
        name: "Composite",
        className: "RedactedTranscriptContent",
        modelProperties: {
            itn: {
                serializedName: "itn",
                type: {
                    name: "String"
                }
            },
            maskedItn: {
                serializedName: "maskedItn",
                type: {
                    name: "String"
                }
            },
            text: {
                serializedName: "text",
                type: {
                    name: "String"
                }
            },
            lexical: {
                serializedName: "lexical",
                type: {
                    name: "String"
                }
            },
            audioTimings: {
                serializedName: "audioTimings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AudioTiming"
                        }
                    }
                }
            }
        }
    }
};
const AudioTiming = {
    type: {
        name: "Composite",
        className: "AudioTiming",
        modelProperties: {
            offset: {
                serializedName: "offset",
                type: {
                    name: "Number"
                }
            },
            duration: {
                serializedName: "duration",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Entity = {
    type: {
        name: "Composite",
        className: "Entity",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                required: true,
                type: {
                    name: "String"
                }
            },
            subcategory: {
                serializedName: "subcategory",
                type: {
                    name: "String"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            },
            confidenceScore: {
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ConversationPIIResult = {
    type: {
        name: "Composite",
        className: "ConversationPIIResult",
        modelProperties: {
            conversationItems: {
                serializedName: "conversationItems",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConversationPIIItemResult"
                        }
                    }
                }
            }
        }
    }
};
const ConversationResultBase = {
    type: {
        name: "Composite",
        className: "ConversationResultBase",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            warnings: {
                serializedName: "warnings",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InputWarning"
                        }
                    }
                }
            },
            statistics: {
                serializedName: "statistics",
                type: {
                    name: "Composite",
                    className: "ConversationStatistics"
                }
            }
        }
    }
};
const InputWarning = {
    type: {
        name: "Composite",
        className: "InputWarning",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            targetRef: {
                serializedName: "targetRef",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConversationStatistics = {
    type: {
        name: "Composite",
        className: "ConversationStatistics",
        modelProperties: {
            transactionsCount: {
                serializedName: "transactionsCount",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const PreBuiltResult = {
    type: {
        name: "Composite",
        className: "PreBuiltResult",
        modelProperties: {
            errors: {
                serializedName: "errors",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InputError"
                        }
                    }
                }
            },
            statistics: {
                serializedName: "statistics",
                type: {
                    name: "Composite",
                    className: "RequestStatistics"
                }
            },
            modelVersion: {
                serializedName: "modelVersion",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InputError = {
    type: {
        name: "Composite",
        className: "InputError",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
const ConversationsSummaryResult = {
    type: {
        name: "Composite",
        className: "ConversationsSummaryResult",
        modelProperties: {
            summaries: {
                serializedName: "summaries",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConversationsSummaryResultSummariesItem"
                        }
                    }
                }
            }
        }
    }
};
const SummaryResultItem = {
    type: {
        name: "Composite",
        className: "SummaryResultItem",
        modelProperties: {
            aspect: {
                serializedName: "aspect",
                required: true,
                type: {
                    name: "String"
                }
            },
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConversationalTask = {
    serializedName: "Conversation",
    type: {
        name: "Composite",
        className: "ConversationalTask",
        uberParent: "AnalyzeConversationTask",
        polymorphicDiscriminator: AnalyzeConversationTask.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeConversationTask.type.modelProperties), { analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "ConversationAnalysisOptions"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ConversationTaskParameters"
                }
            } })
    }
};
const ConversationalTaskResult = {
    serializedName: "ConversationResult",
    type: {
        name: "Composite",
        className: "ConversationalTaskResult",
        uberParent: "AnalyzeConversationTaskResult",
        polymorphicDiscriminator: AnalyzeConversationTaskResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeConversationTaskResult.type.modelProperties), { result: {
                serializedName: "result",
                type: {
                    name: "Composite",
                    className: "AnalyzeConversationResult"
                }
            } })
    }
};
const TextConversation = {
    serializedName: "text",
    type: {
        name: "Composite",
        className: "TextConversation",
        uberParent: "Conversation",
        polymorphicDiscriminator: Conversation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Conversation.type.modelProperties), { conversationItems: {
                serializedName: "conversationItems",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TextConversationItem"
                        }
                    }
                }
            } })
    }
};
const TranscriptConversation = {
    serializedName: "transcript",
    type: {
        name: "Composite",
        className: "TranscriptConversation",
        uberParent: "Conversation",
        polymorphicDiscriminator: Conversation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Conversation.type.modelProperties), { conversationItems: {
                serializedName: "conversationItems",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TranscriptConversationItem"
                        }
                    }
                }
            } })
    }
};
const AnalyzeConversationLROTask = {
    serializedName: "AnalyzeConversationLROTask",
    type: {
        name: "Composite",
        className: "AnalyzeConversationLROTask",
        uberParent: "TaskIdentifier",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, TaskIdentifier.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AnalyzeConversationJobResult = {
    serializedName: "AnalyzeConversationJobResult",
    type: {
        name: "Composite",
        className: "AnalyzeConversationJobResult",
        uberParent: "TaskStateAutoGenerated",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign(Object.assign({}, TaskStateAutoGenerated.type.modelProperties), TaskIdentifier.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AnalyzeConversationJobState = {
    type: {
        name: "Composite",
        className: "AnalyzeConversationJobState",
        modelProperties: Object.assign(Object.assign(Object.assign({}, JobStateAutoGenerated.type.modelProperties), ConversationTasksState.type.modelProperties), AnalyzeConversationJobStatistics.type.modelProperties)
    }
};
const ConversationRequestStatistics = {
    type: {
        name: "Composite",
        className: "ConversationRequestStatistics",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, RequestStatistics.type.modelProperties), { conversationsCount: {
                serializedName: "conversationsCount",
                required: true,
                type: {
                    name: "Number"
                }
            }, validConversationsCount: {
                serializedName: "validConversationsCount",
                required: true,
                type: {
                    name: "Number"
                }
            }, erroneousConversationsCount: {
                serializedName: "erroneousConversationsCount",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const TextConversationItem = {
    type: {
        name: "Composite",
        className: "TextConversationItem",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, ConversationItemBase.type.modelProperties), { text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const TranscriptConversationItem = {
    type: {
        name: "Composite",
        className: "TranscriptConversationItem",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, ConversationItemBase.type.modelProperties), { itn: {
                serializedName: "itn",
                type: {
                    name: "String"
                }
            }, maskedItn: {
                serializedName: "maskedItn",
                type: {
                    name: "String"
                }
            }, text: {
                serializedName: "text",
                type: {
                    name: "String"
                }
            }, lexical: {
                serializedName: "lexical",
                type: {
                    name: "String"
                }
            }, audioTimings: {
                serializedName: "audioTimings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WordLevelTiming"
                        }
                    }
                }
            } })
    }
};
const LuisParameters = {
    serializedName: "Luis",
    type: {
        name: "Composite",
        className: "LuisParameters",
        uberParent: "AnalysisParameters",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: AnalysisParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalysisParameters.type.modelProperties), { query: {
                constraints: {
                    MaxLength: 500
                },
                serializedName: "query",
                type: {
                    name: "String"
                }
            }, callingOptions: {
                serializedName: "callingOptions",
                type: {
                    name: "Composite",
                    className: "LuisCallingOptions"
                }
            } })
    }
};
const ConversationParameters = {
    serializedName: "Conversation",
    type: {
        name: "Composite",
        className: "ConversationParameters",
        uberParent: "AnalysisParameters",
        polymorphicDiscriminator: AnalysisParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalysisParameters.type.modelProperties), { callingOptions: {
                serializedName: "callingOptions",
                type: {
                    name: "Composite",
                    className: "ConversationCallingOptions"
                }
            } })
    }
};
const QuestionAnsweringParameters = {
    serializedName: "QuestionAnswering",
    type: {
        name: "Composite",
        className: "QuestionAnsweringParameters",
        uberParent: "AnalysisParameters",
        polymorphicDiscriminator: AnalysisParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalysisParameters.type.modelProperties), { callingOptions: {
                serializedName: "callingOptions",
                type: {
                    name: "Composite",
                    className: "AnswersOptions"
                }
            } })
    }
};
const ConversationPrediction = {
    serializedName: "Conversation",
    type: {
        name: "Composite",
        className: "ConversationPrediction",
        uberParent: "BasePrediction",
        polymorphicDiscriminator: BasePrediction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BasePrediction.type.modelProperties), { intents: {
                serializedName: "intents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConversationIntent"
                        }
                    }
                }
            }, entities: {
                serializedName: "entities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConversationEntity"
                        }
                    }
                }
            } })
    }
};
const OrchestrationPrediction = {
    serializedName: "Orchestration",
    type: {
        name: "Composite",
        className: "OrchestrationPrediction",
        uberParent: "BasePrediction",
        polymorphicDiscriminator: BasePrediction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BasePrediction.type.modelProperties), { intents: {
                serializedName: "intents",
                required: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "TargetIntentResult" }
                    }
                }
            } })
    }
};
const AgeResolution = {
    serializedName: "Age",
    type: {
        name: "Composite",
        className: "AgeResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const VolumeResolution = {
    serializedName: "Volume",
    type: {
        name: "Composite",
        className: "VolumeResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SpeedResolution = {
    serializedName: "Speed",
    type: {
        name: "Composite",
        className: "SpeedResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AreaResolution = {
    serializedName: "Area",
    type: {
        name: "Composite",
        className: "AreaResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const LengthResolution = {
    serializedName: "Length",
    type: {
        name: "Composite",
        className: "LengthResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const InformationResolution = {
    serializedName: "Information",
    type: {
        name: "Composite",
        className: "InformationResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const TemperatureResolution = {
    serializedName: "Temperature",
    type: {
        name: "Composite",
        className: "TemperatureResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const WeightResolution = {
    serializedName: "Weight",
    type: {
        name: "Composite",
        className: "WeightResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const CurrencyResolution = {
    serializedName: "Currency",
    type: {
        name: "Composite",
        className: "CurrencyResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign(Object.assign({}, BaseResolution.type.modelProperties), QuantityResolution.type.modelProperties), { iso4217: {
                serializedName: "ISO4217",
                type: {
                    name: "String"
                }
            }, unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const BooleanResolution = {
    serializedName: "Boolean",
    type: {
        name: "Composite",
        className: "BooleanResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BaseResolution.type.modelProperties), { value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const DateTimeResolution = {
    serializedName: "DateTime",
    type: {
        name: "Composite",
        className: "DateTimeResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BaseResolution.type.modelProperties), { timex: {
                serializedName: "timex",
                required: true,
                type: {
                    name: "String"
                }
            }, dateTimeSubKind: {
                serializedName: "dateTimeSubKind",
                required: true,
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }, modifier: {
                serializedName: "modifier",
                type: {
                    name: "String"
                }
            } })
    }
};
const NumberResolution = {
    serializedName: "Number",
    type: {
        name: "Composite",
        className: "NumberResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BaseResolution.type.modelProperties), { numberKind: {
                serializedName: "numberKind",
                required: true,
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const OrdinalResolution = {
    serializedName: "Ordinal",
    type: {
        name: "Composite",
        className: "OrdinalResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BaseResolution.type.modelProperties), { offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "String"
                }
            }, relativeTo: {
                serializedName: "relativeTo",
                required: true,
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const TemporalSpanResolution = {
    serializedName: "TemporalSpan",
    type: {
        name: "Composite",
        className: "TemporalSpanResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BaseResolution.type.modelProperties), { begin: {
                serializedName: "begin",
                type: {
                    name: "String"
                }
            }, end: {
                serializedName: "end",
                type: {
                    name: "String"
                }
            }, duration: {
                serializedName: "duration",
                type: {
                    name: "String"
                }
            }, modifier: {
                serializedName: "modifier",
                type: {
                    name: "String"
                }
            } })
    }
};
const NumericRangeResolution = {
    serializedName: "NumericRange",
    type: {
        name: "Composite",
        className: "NumericRangeResolution",
        uberParent: "BaseResolution",
        polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BaseResolution.type.modelProperties), { rangeKind: {
                serializedName: "rangeKind",
                required: true,
                type: {
                    name: "String"
                }
            }, minimum: {
                serializedName: "minimum",
                required: true,
                type: {
                    name: "Number"
                }
            }, maximum: {
                serializedName: "maximum",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const EntitySubtype = {
    serializedName: "EntitySubtype",
    type: {
        name: "Composite",
        className: "EntitySubtype",
        uberParent: "BaseExtraInformation",
        polymorphicDiscriminator: BaseExtraInformation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BaseExtraInformation.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            } })
    }
};
const ListKey = {
    serializedName: "ListKey",
    type: {
        name: "Composite",
        className: "ListKey",
        uberParent: "BaseExtraInformation",
        polymorphicDiscriminator: BaseExtraInformation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BaseExtraInformation.type.modelProperties), { key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            } })
    }
};
const NoneLinkedTargetIntentResult = {
    serializedName: "NonLinked",
    type: {
        name: "Composite",
        className: "NoneLinkedTargetIntentResult",
        uberParent: "TargetIntentResult",
        polymorphicDiscriminator: TargetIntentResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TargetIntentResult.type.modelProperties), { result: {
                serializedName: "result",
                type: {
                    name: "Composite",
                    className: "ConversationResult"
                }
            } })
    }
};
const ConversationTargetIntentResult = {
    serializedName: "Conversation",
    type: {
        name: "Composite",
        className: "ConversationTargetIntentResult",
        uberParent: "TargetIntentResult",
        polymorphicDiscriminator: TargetIntentResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TargetIntentResult.type.modelProperties), { result: {
                serializedName: "result",
                type: {
                    name: "Composite",
                    className: "ConversationResult"
                }
            } })
    }
};
const LuisTargetIntentResult = {
    serializedName: "Luis",
    type: {
        name: "Composite",
        className: "LuisTargetIntentResult",
        uberParent: "TargetIntentResult",
        polymorphicDiscriminator: TargetIntentResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TargetIntentResult.type.modelProperties), { result: {
                serializedName: "result",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const QuestionAnsweringTargetIntentResult = {
    serializedName: "QuestionAnswering",
    type: {
        name: "Composite",
        className: "QuestionAnsweringTargetIntentResult",
        uberParent: "TargetIntentResult",
        polymorphicDiscriminator: TargetIntentResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TargetIntentResult.type.modelProperties), { result: {
                serializedName: "result",
                type: {
                    name: "Composite",
                    className: "AnswersResult"
                }
            } })
    }
};
const PreBuiltTaskParameters = {
    type: {
        name: "Composite",
        className: "PreBuiltTaskParameters",
        modelProperties: Object.assign(Object.assign({}, TaskParameters.type.modelProperties), { modelVersion: {
                defaultValue: "latest",
                serializedName: "modelVersion",
                type: {
                    name: "String"
                }
            } })
    }
};
const WordLevelTiming = {
    type: {
        name: "Composite",
        className: "WordLevelTiming",
        modelProperties: Object.assign(Object.assign({}, AudioTiming.type.modelProperties), { word: {
                serializedName: "word",
                type: {
                    name: "String"
                }
            } })
    }
};
const ConversationPIIResultsConversationsItem = {
    type: {
        name: "Composite",
        className: "ConversationPIIResultsConversationsItem",
        modelProperties: Object.assign(Object.assign({}, ConversationPIIResult.type.modelProperties), ConversationResultBase.type.modelProperties)
    }
};
const SummaryResultConversationsItem = {
    type: {
        name: "Composite",
        className: "SummaryResultConversationsItem",
        modelProperties: Object.assign(Object.assign({}, ConversationsSummaryResult.type.modelProperties), ConversationResultBase.type.modelProperties)
    }
};
const ConversationPIIResults = {
    type: {
        name: "Composite",
        className: "ConversationPIIResults",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { conversations: {
                serializedName: "conversations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConversationPIIResultsConversationsItem"
                        }
                    }
                }
            } })
    }
};
const SummaryResult = {
    type: {
        name: "Composite",
        className: "SummaryResult",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { conversations: {
                serializedName: "conversations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SummaryResultConversationsItem"
                        }
                    }
                }
            } })
    }
};
const ConversationsSummaryResultSummariesItem = {
    type: {
        name: "Composite",
        className: "ConversationsSummaryResultSummariesItem",
        modelProperties: Object.assign({}, SummaryResultItem.type.modelProperties)
    }
};
const AnalyzeConversationPIITask = {
    serializedName: "ConversationalPIITask",
    type: {
        name: "Composite",
        className: "AnalyzeConversationPIITask",
        uberParent: "TaskIdentifier",
        polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeConversationLROTask.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ConversationPIITaskParameters"
                }
            } })
    }
};
const AnalyzeConversationSummarizationTask = {
    serializedName: "ConversationalSummarizationTask",
    type: {
        name: "Composite",
        className: "AnalyzeConversationSummarizationTask",
        uberParent: "TaskIdentifier",
        polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeConversationLROTask.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ConversationSummarizationTaskParameters"
                }
            } })
    }
};
const AnalyzeConversationPIIResult = {
    serializedName: "ConversationalPIIResults",
    type: {
        name: "Composite",
        className: "AnalyzeConversationPIIResult",
        uberParent: "TaskStateAutoGenerated",
        polymorphicDiscriminator: TaskStateAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeConversationJobResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "ConversationPIIResults"
                }
            } })
    }
};
const AnalyzeConversationSummarizationResult = {
    serializedName: "ConversationalSummarizationResults",
    type: {
        name: "Composite",
        className: "AnalyzeConversationSummarizationResult",
        uberParent: "TaskStateAutoGenerated",
        polymorphicDiscriminator: TaskStateAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeConversationJobResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "SummaryResult"
                }
            } })
    }
};
const ConversationPIITaskParameters = {
    type: {
        name: "Composite",
        className: "ConversationPIITaskParameters",
        modelProperties: Object.assign(Object.assign({}, PreBuiltTaskParameters.type.modelProperties), { piiCategories: {
                constraints: {
                    UniqueItems: true
                },
                serializedName: "piiCategories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, includeAudioRedaction: {
                defaultValue: false,
                serializedName: "includeAudioRedaction",
                type: {
                    name: "Boolean"
                }
            }, redactionSource: {
                serializedName: "redactionSource",
                type: {
                    name: "String"
                }
            } })
    }
};
const ConversationSummarizationTaskParameters = {
    type: {
        name: "Composite",
        className: "ConversationSummarizationTaskParameters",
        modelProperties: Object.assign(Object.assign({}, PreBuiltTaskParameters.type.modelProperties), { summaryAspects: {
                serializedName: "summaryAspects",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ConversationAnalysisClientAnalyzeConversationExceptionHeaders = {
    type: {
        name: "Composite",
        className: "ConversationAnalysisClientAnalyzeConversationExceptionHeaders",
        modelProperties: {
            xMsErrorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConversationAnalysisClientConversationAnalysisHeaders = {
    type: {
        name: "Composite",
        className: "ConversationAnalysisClientConversationAnalysisHeaders",
        modelProperties: {
            operationLocation: {
                serializedName: "operation-location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    AnalyzeConversationTask: AnalyzeConversationTask,
    AnalyzeConversationTaskResult: AnalyzeConversationTaskResult,
    Conversation: Conversation,
    AnalysisParameters: AnalysisParameters,
    BasePrediction: BasePrediction,
    BaseResolution: BaseResolution,
    BaseExtraInformation: BaseExtraInformation,
    TargetIntentResult: TargetIntentResult,
    "AnalyzeConversationTask.Conversation": ConversationalTask,
    "AnalyzeConversationTaskResult.ConversationResult": ConversationalTaskResult,
    "Conversation.text": TextConversation,
    "Conversation.transcript": TranscriptConversation,
    "TaskIdentifier.AnalyzeConversationLROTask": AnalyzeConversationLROTask,
    "TaskStateAutoGenerated.AnalyzeConversationJobResult": AnalyzeConversationJobResult,
    "AnalysisParameters.Luis": LuisParameters,
    "AnalysisParameters.Conversation": ConversationParameters,
    "AnalysisParameters.QuestionAnswering": QuestionAnsweringParameters,
    "BasePrediction.Conversation": ConversationPrediction,
    "BasePrediction.Orchestration": OrchestrationPrediction,
    "BaseResolution.Age": AgeResolution,
    "BaseResolution.Volume": VolumeResolution,
    "BaseResolution.Speed": SpeedResolution,
    "BaseResolution.Area": AreaResolution,
    "BaseResolution.Length": LengthResolution,
    "BaseResolution.Information": InformationResolution,
    "BaseResolution.Temperature": TemperatureResolution,
    "BaseResolution.Weight": WeightResolution,
    "BaseResolution.Currency": CurrencyResolution,
    "BaseResolution.Boolean": BooleanResolution,
    "BaseResolution.DateTime": DateTimeResolution,
    "BaseResolution.Number": NumberResolution,
    "BaseResolution.Ordinal": OrdinalResolution,
    "BaseResolution.TemporalSpan": TemporalSpanResolution,
    "BaseResolution.NumericRange": NumericRangeResolution,
    "BaseExtraInformation.EntitySubtype": EntitySubtype,
    "BaseExtraInformation.ListKey": ListKey,
    "TargetIntentResult.NonLinked": NoneLinkedTargetIntentResult,
    "TargetIntentResult.Conversation": ConversationTargetIntentResult,
    "TargetIntentResult.Luis": LuisTargetIntentResult,
    "TargetIntentResult.QuestionAnswering": QuestionAnsweringTargetIntentResult,
    "TaskIdentifier.ConversationalPIITask": AnalyzeConversationPIITask,
    "TaskIdentifier.ConversationalSummarizationTask": AnalyzeConversationSummarizationTask,
    "TaskStateAutoGenerated.ConversationalPIIResults": AnalyzeConversationPIIResult,
    "TaskStateAutoGenerated.ConversationalSummarizationResults": AnalyzeConversationSummarizationResult
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AnalyzeConversationTask: AnalyzeConversationTask,
    AnalyzeConversationTaskResult: AnalyzeConversationTaskResult,
    ErrorResponse: ErrorResponse,
    ErrorModel: ErrorModel,
    InnerErrorModel: InnerErrorModel,
    AnalyzeConversationJobsInput: AnalyzeConversationJobsInput,
    MultiLanguageConversationAnalysisInput: MultiLanguageConversationAnalysisInput,
    Conversation: Conversation,
    TaskIdentifier: TaskIdentifier,
    JobStateAutoGenerated: JobStateAutoGenerated,
    ConversationTasksState: ConversationTasksState,
    ConversationTasksStateTasks: ConversationTasksStateTasks,
    TaskStateAutoGenerated: TaskStateAutoGenerated,
    AnalyzeConversationJobStatistics: AnalyzeConversationJobStatistics,
    RequestStatistics: RequestStatistics,
    ConversationAnalysisOptions: ConversationAnalysisOptions,
    ConversationItemBase: ConversationItemBase,
    ConversationTaskParameters: ConversationTaskParameters,
    AnalysisParameters: AnalysisParameters,
    AnalyzeConversationResult: AnalyzeConversationResult,
    BasePrediction: BasePrediction,
    ConversationResult: ConversationResult,
    ConversationIntent: ConversationIntent,
    ConversationEntity: ConversationEntity,
    BaseResolution: BaseResolution,
    BaseExtraInformation: BaseExtraInformation,
    TargetIntentResult: TargetIntentResult,
    LuisCallingOptions: LuisCallingOptions,
    ConversationCallingOptions: ConversationCallingOptions,
    AnswersOptions: AnswersOptions,
    KnowledgeBaseAnswerContext: KnowledgeBaseAnswerContext,
    QueryFilters: QueryFilters,
    MetadataFilter: MetadataFilter,
    MetadataRecord: MetadataRecord,
    ShortAnswerOptions: ShortAnswerOptions,
    QuantityResolution: QuantityResolution,
    AnswersResult: AnswersResult,
    KnowledgeBaseAnswer: KnowledgeBaseAnswer,
    KnowledgeBaseAnswerDialog: KnowledgeBaseAnswerDialog,
    KnowledgeBaseAnswerPrompt: KnowledgeBaseAnswerPrompt,
    AnswerSpan: AnswerSpan,
    TaskParameters: TaskParameters,
    ConversationPIIItemResult: ConversationPIIItemResult,
    RedactedTranscriptContent: RedactedTranscriptContent,
    AudioTiming: AudioTiming,
    Entity: Entity,
    ConversationPIIResult: ConversationPIIResult,
    ConversationResultBase: ConversationResultBase,
    InputWarning: InputWarning,
    ConversationStatistics: ConversationStatistics,
    PreBuiltResult: PreBuiltResult,
    InputError: InputError,
    ConversationsSummaryResult: ConversationsSummaryResult,
    SummaryResultItem: SummaryResultItem,
    ConversationalTask: ConversationalTask,
    ConversationalTaskResult: ConversationalTaskResult,
    TextConversation: TextConversation,
    TranscriptConversation: TranscriptConversation,
    AnalyzeConversationLROTask: AnalyzeConversationLROTask,
    AnalyzeConversationJobResult: AnalyzeConversationJobResult,
    AnalyzeConversationJobState: AnalyzeConversationJobState,
    ConversationRequestStatistics: ConversationRequestStatistics,
    TextConversationItem: TextConversationItem,
    TranscriptConversationItem: TranscriptConversationItem,
    LuisParameters: LuisParameters,
    ConversationParameters: ConversationParameters,
    QuestionAnsweringParameters: QuestionAnsweringParameters,
    ConversationPrediction: ConversationPrediction,
    OrchestrationPrediction: OrchestrationPrediction,
    AgeResolution: AgeResolution,
    VolumeResolution: VolumeResolution,
    SpeedResolution: SpeedResolution,
    AreaResolution: AreaResolution,
    LengthResolution: LengthResolution,
    InformationResolution: InformationResolution,
    TemperatureResolution: TemperatureResolution,
    WeightResolution: WeightResolution,
    CurrencyResolution: CurrencyResolution,
    BooleanResolution: BooleanResolution,
    DateTimeResolution: DateTimeResolution,
    NumberResolution: NumberResolution,
    OrdinalResolution: OrdinalResolution,
    TemporalSpanResolution: TemporalSpanResolution,
    NumericRangeResolution: NumericRangeResolution,
    EntitySubtype: EntitySubtype,
    ListKey: ListKey,
    NoneLinkedTargetIntentResult: NoneLinkedTargetIntentResult,
    ConversationTargetIntentResult: ConversationTargetIntentResult,
    LuisTargetIntentResult: LuisTargetIntentResult,
    QuestionAnsweringTargetIntentResult: QuestionAnsweringTargetIntentResult,
    PreBuiltTaskParameters: PreBuiltTaskParameters,
    WordLevelTiming: WordLevelTiming,
    ConversationPIIResultsConversationsItem: ConversationPIIResultsConversationsItem,
    SummaryResultConversationsItem: SummaryResultConversationsItem,
    ConversationPIIResults: ConversationPIIResults,
    SummaryResult: SummaryResult,
    ConversationsSummaryResultSummariesItem: ConversationsSummaryResultSummariesItem,
    AnalyzeConversationPIITask: AnalyzeConversationPIITask,
    AnalyzeConversationSummarizationTask: AnalyzeConversationSummarizationTask,
    AnalyzeConversationPIIResult: AnalyzeConversationPIIResult,
    AnalyzeConversationSummarizationResult: AnalyzeConversationSummarizationResult,
    ConversationPIITaskParameters: ConversationPIITaskParameters,
    ConversationSummarizationTaskParameters: ConversationSummarizationTaskParameters,
    ConversationAnalysisClientAnalyzeConversationExceptionHeaders: ConversationAnalysisClientAnalyzeConversationExceptionHeaders,
    ConversationAnalysisClientConversationAnalysisHeaders: ConversationAnalysisClientConversationAnalysisHeaders,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const task = {
    parameterPath: "task",
    mapper: AnalyzeConversationTask
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "Endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-05-15-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const task1 = {
    parameterPath: "task",
    mapper: AnalyzeConversationJobsInput
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** @internal */
class ConversationAnalysisClient$1 extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the ConversationAnalysisClient class.
     * @param endpoint Supported Cognitive Services endpoint (e.g.,
     *                 https://<resource-name>.api.cognitiveservices.azure.com).
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        var _a, _b;
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8"
        };
        const packageDetails = `azsdk-js-ai-language-conversations/1.0.0-beta.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "{Endpoint}/language" });
        super(optionsWithDefaults);
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
            if (!bearerTokenAuthenticationPolicyFound) {
                this.pipeline.removePolicy({
                    name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
                });
                this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                    scopes: `${optionsWithDefaults.baseUri}/.default`,
                    challengeCallbacks: {
                        authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                    }
                }));
            }
        }
        // Parameter assignments
        this.endpoint = endpoint;
        // Assigning values to Constant parameters
        this.apiVersion = options.apiVersion || "2022-05-15-preview";
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            async sendRequest(request, next) {
                const param = request.url.split("?");
                if (param.length > 1) {
                    const newParams = param[1].split("&").map((item) => {
                        if (item.indexOf("api-version") > -1) {
                            return "api-version=" + apiVersion;
                        }
                        else {
                            return item;
                        }
                    });
                    request.url = param[0] + "?" + newParams.join("&");
                }
                return next(request);
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Analyzes the input conversation utterance.
     * @param task A single conversational task to execute.
     * @param options The options parameters.
     */
    analyzeConversation(task, options) {
        return this.sendOperationRequest({ task, options }, analyzeConversationOperationSpec);
    }
    /**
     * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.
     * @param task The collection of conversations to analyze and one or more tasks to execute.
     * @param options The options parameters.
     */
    async beginConversationAnalysis(task, options) {
        const directSendOperation = async (args, spec) => {
            return this.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new LroImpl(sendOperation, { task, options }, conversationAnalysisOperationSpec);
        const poller = new coreLro.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.
     * @param task The collection of conversations to analyze and one or more tasks to execute.
     * @param options The options parameters.
     */
    async beginConversationAnalysisAndWait(task, options) {
        const poller = await this.beginConversationAnalysis(task, options);
        return poller.pollUntilDone();
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const analyzeConversationOperationSpec = {
    path: "/:analyze-conversations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AnalyzeConversationTaskResult
        },
        default: {
            bodyMapper: ErrorResponse,
            headersMapper: ConversationAnalysisClientAnalyzeConversationExceptionHeaders
        }
    },
    requestBody: task,
    queryParameters: [apiVersion],
    urlParameters: [endpoint],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const conversationAnalysisOperationSpec = {
    path: "/analyze-conversations/jobs",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AnalyzeConversationJobState
        },
        201: {
            bodyMapper: AnalyzeConversationJobState
        },
        202: {
            bodyMapper: AnalyzeConversationJobState
        },
        204: {
            bodyMapper: AnalyzeConversationJobState
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: task1,
    queryParameters: [apiVersion],
    urlParameters: [endpoint],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const API_KEY_HEADER_NAME = "Ocp-Apim-Subscription-Key";
/**
 * The programmatic identifier of the conversationAnalysisAzureKeyCredentialPolicy.
 */
const conversationAnalysisAzureKeyCredentialPolicyName = "conversationAnalysisAzureKeyCredentialPolicy";
/**
 * Create an HTTP pipeline policy to authenticate a request
 * using an `AzureKeyCredential` for Conversation Analysis
 * @internal
 */
function conversationAnalysisAzureKeyCredentialPolicy(credential) {
    return {
        name: conversationAnalysisAzureKeyCredentialPolicyName,
        sendRequest(request, next) {
            request.headers.set(API_KEY_HEADER_NAME, credential.key);
            return next(request);
        },
    };
}

// Copyright (c) Microsoft Corporation.
/**
 * A client for interacting with the conversational language understanding
 * features in Azure Cognitive Language Service.
 *
 * The client needs the endpoint of a Language resource and an authentication
 * method such as an API key or AAD. The API key and endpoint can be found in
 * the Language resource page in the Azure portal. They will be located in the
 * resource's Keys and Endpoint page, under Resource Management.
 *
 * ### Examples for authentication:
 *
 * #### API Key
 *
 * ```js
 * import { AzureKeyCredential } from "@azure/core-auth";
 * import { ConversationAnalysisClient } from "@azure/ai-language-conversations";
 *
 * const endpoint = "https://<resource name>.cognitiveservices.azure.com";
 * const credential = new AzureKeyCredential("<api key>");
 *
 * const client = new ConversationAnalysisClient(endpoint, credential);
 * ```
 *
 * #### Azure Active Directory
 *
 * See the [`@azure/identity`](https://npmjs.com/package/\@azure/identity)
 * package for more information about authenticating with Azure Active Directory.
 *
 * ```js
 * import { ConversationAnalysisClient } from "@azure/ai-language-conversations";
 * import { DefaultAzureCredential } from "@azure/identity";
 *
 * const endpoint = "https://<resource name>.cognitiveservices.azure.com";
 * const credential = new DefaultAzureCredential();
 *
 * const client = new ConversationAnalysisClient(endpoint, credential);
 * ```
 */
class ConversationAnalysisClient {
    /**
     * Initializes a new instance of the ConversationAnalysisClient class.
     * @param endpoint - Supported Cognitive Services endpoint (e.g.,
     *                 https://<resource-name>.api.cognitiveservices.azure.com).
     * @param options - The parameter options
     */
    constructor(endpoint, credential, options = {}) {
        this._client = new ConversationAnalysisClient$1(endpoint, options);
        this._tracing = coreTracing.createTracingClient({
            packageName: "@azure/ai-language-conversations",
            packageVersion: SDK_VERSION,
            namespace: "Microsoft.CognitiveServices",
        });
        const authPolicy = coreAuth.isTokenCredential(credential)
            ? coreRestPipeline.bearerTokenAuthenticationPolicy({ credential, scopes: DEFAULT_COGNITIVE_SCOPE })
            : conversationAnalysisAzureKeyCredentialPolicy(credential);
        this._client.pipeline.addPolicy(authPolicy);
    }
    /**
     * Analyzes the input conversation utterance.
     * @param task - A single conversational task to execute.
     * @param options - The options parameters.
     */
    analyzeConversation(task, options) {
        return this._tracing.withSpan("ConversationAnalysisClient.analyzeConversation", options || {}, (updatedOptions) => this._client.analyzeConversation(task, updatedOptions));
    }
    /**
     * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.
     * @param task - The collection of conversations to analyze and one or more tasks to execute.
     * @param options - The options parameters.
     */
    async beginConversationAnalysis(task, options) {
        return this._tracing.withSpan("ConversationAnalysisClient.beginConversationAnalysis", options || {}, (updatedOptions) => this._client.beginConversationAnalysis(task, updatedOptions));
    }
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/** Known values of {@link AnalyzeConversationTaskKind} that the service accepts. */
exports.KnownAnalyzeConversationTaskKind = void 0;
(function (KnownAnalyzeConversationTaskKind) {
    /** Conversation */
    KnownAnalyzeConversationTaskKind["Conversation"] = "Conversation";
})(exports.KnownAnalyzeConversationTaskKind || (exports.KnownAnalyzeConversationTaskKind = {}));
/** Known values of {@link AnalyzeConversationTaskResultsKind} that the service accepts. */
exports.KnownAnalyzeConversationTaskResultsKind = void 0;
(function (KnownAnalyzeConversationTaskResultsKind) {
    /** ConversationResult */
    KnownAnalyzeConversationTaskResultsKind["ConversationResult"] = "ConversationResult";
})(exports.KnownAnalyzeConversationTaskResultsKind || (exports.KnownAnalyzeConversationTaskResultsKind = {}));
/** Known values of {@link ErrorCode} that the service accepts. */
exports.KnownErrorCode = void 0;
(function (KnownErrorCode) {
    /** InvalidRequest */
    KnownErrorCode["InvalidRequest"] = "InvalidRequest";
    /** InvalidArgument */
    KnownErrorCode["InvalidArgument"] = "InvalidArgument";
    /** Unauthorized */
    KnownErrorCode["Unauthorized"] = "Unauthorized";
    /** Forbidden */
    KnownErrorCode["Forbidden"] = "Forbidden";
    /** NotFound */
    KnownErrorCode["NotFound"] = "NotFound";
    /** ProjectNotFound */
    KnownErrorCode["ProjectNotFound"] = "ProjectNotFound";
    /** OperationNotFound */
    KnownErrorCode["OperationNotFound"] = "OperationNotFound";
    /** AzureCognitiveSearchNotFound */
    KnownErrorCode["AzureCognitiveSearchNotFound"] = "AzureCognitiveSearchNotFound";
    /** AzureCognitiveSearchIndexNotFound */
    KnownErrorCode["AzureCognitiveSearchIndexNotFound"] = "AzureCognitiveSearchIndexNotFound";
    /** TooManyRequests */
    KnownErrorCode["TooManyRequests"] = "TooManyRequests";
    /** AzureCognitiveSearchThrottling */
    KnownErrorCode["AzureCognitiveSearchThrottling"] = "AzureCognitiveSearchThrottling";
    /** AzureCognitiveSearchIndexLimitReached */
    KnownErrorCode["AzureCognitiveSearchIndexLimitReached"] = "AzureCognitiveSearchIndexLimitReached";
    /** InternalServerError */
    KnownErrorCode["InternalServerError"] = "InternalServerError";
    /** ServiceUnavailable */
    KnownErrorCode["ServiceUnavailable"] = "ServiceUnavailable";
    /** Timeout */
    KnownErrorCode["Timeout"] = "Timeout";
    /** QuotaExceeded */
    KnownErrorCode["QuotaExceeded"] = "QuotaExceeded";
    /** Conflict */
    KnownErrorCode["Conflict"] = "Conflict";
    /** Warning */
    KnownErrorCode["Warning"] = "Warning";
})(exports.KnownErrorCode || (exports.KnownErrorCode = {}));
/** Known values of {@link InnerErrorCode} that the service accepts. */
exports.KnownInnerErrorCode = void 0;
(function (KnownInnerErrorCode) {
    /** InvalidRequest */
    KnownInnerErrorCode["InvalidRequest"] = "InvalidRequest";
    /** InvalidParameterValue */
    KnownInnerErrorCode["InvalidParameterValue"] = "InvalidParameterValue";
    /** KnowledgeBaseNotFound */
    KnownInnerErrorCode["KnowledgeBaseNotFound"] = "KnowledgeBaseNotFound";
    /** AzureCognitiveSearchNotFound */
    KnownInnerErrorCode["AzureCognitiveSearchNotFound"] = "AzureCognitiveSearchNotFound";
    /** AzureCognitiveSearchThrottling */
    KnownInnerErrorCode["AzureCognitiveSearchThrottling"] = "AzureCognitiveSearchThrottling";
    /** ExtractionFailure */
    KnownInnerErrorCode["ExtractionFailure"] = "ExtractionFailure";
    /** InvalidRequestBodyFormat */
    KnownInnerErrorCode["InvalidRequestBodyFormat"] = "InvalidRequestBodyFormat";
    /** EmptyRequest */
    KnownInnerErrorCode["EmptyRequest"] = "EmptyRequest";
    /** MissingInputDocuments */
    KnownInnerErrorCode["MissingInputDocuments"] = "MissingInputDocuments";
    /** InvalidDocument */
    KnownInnerErrorCode["InvalidDocument"] = "InvalidDocument";
    /** ModelVersionIncorrect */
    KnownInnerErrorCode["ModelVersionIncorrect"] = "ModelVersionIncorrect";
    /** InvalidDocumentBatch */
    KnownInnerErrorCode["InvalidDocumentBatch"] = "InvalidDocumentBatch";
    /** UnsupportedLanguageCode */
    KnownInnerErrorCode["UnsupportedLanguageCode"] = "UnsupportedLanguageCode";
    /** InvalidCountryHint */
    KnownInnerErrorCode["InvalidCountryHint"] = "InvalidCountryHint";
})(exports.KnownInnerErrorCode || (exports.KnownInnerErrorCode = {}));
/** Known values of {@link InputModality} that the service accepts. */
exports.KnownInputModality = void 0;
(function (KnownInputModality) {
    /** Transcript */
    KnownInputModality["Transcript"] = "transcript";
    /** Text */
    KnownInputModality["Text"] = "text";
})(exports.KnownInputModality || (exports.KnownInputModality = {}));
/** Known values of {@link ConversationDomain} that the service accepts. */
exports.KnownConversationDomain = void 0;
(function (KnownConversationDomain) {
    /** Finance */
    KnownConversationDomain["Finance"] = "finance";
    /** Healthcare */
    KnownConversationDomain["Healthcare"] = "healthcare";
    /** Generic */
    KnownConversationDomain["Generic"] = "generic";
})(exports.KnownConversationDomain || (exports.KnownConversationDomain = {}));
/** Known values of {@link AnalyzeConversationLROTaskKind} that the service accepts. */
exports.KnownAnalyzeConversationLROTaskKind = void 0;
(function (KnownAnalyzeConversationLROTaskKind) {
    /** ConversationalPIITask */
    KnownAnalyzeConversationLROTaskKind["ConversationalPIITask"] = "ConversationalPIITask";
    /** ConversationalSummarizationTask */
    KnownAnalyzeConversationLROTaskKind["ConversationalSummarizationTask"] = "ConversationalSummarizationTask";
})(exports.KnownAnalyzeConversationLROTaskKind || (exports.KnownAnalyzeConversationLROTaskKind = {}));
/** Known values of {@link JobState} that the service accepts. */
exports.KnownJobState = void 0;
(function (KnownJobState) {
    /** NotStarted */
    KnownJobState["NotStarted"] = "notStarted";
    /** Running */
    KnownJobState["Running"] = "running";
    /** Succeeded */
    KnownJobState["Succeeded"] = "succeeded";
    /** PartiallyCompleted */
    KnownJobState["PartiallyCompleted"] = "partiallyCompleted";
    /** Failed */
    KnownJobState["Failed"] = "failed";
    /** Cancelled */
    KnownJobState["Cancelled"] = "cancelled";
    /** Cancelling */
    KnownJobState["Cancelling"] = "cancelling";
})(exports.KnownJobState || (exports.KnownJobState = {}));
/** Known values of {@link AnalyzeConversationResultsKind} that the service accepts. */
exports.KnownAnalyzeConversationResultsKind = void 0;
(function (KnownAnalyzeConversationResultsKind) {
    /** ConversationalPIIResults */
    KnownAnalyzeConversationResultsKind["ConversationalPIIResults"] = "ConversationalPIIResults";
    /** ConversationalSummarizationResults */
    KnownAnalyzeConversationResultsKind["ConversationalSummarizationResults"] = "ConversationalSummarizationResults";
})(exports.KnownAnalyzeConversationResultsKind || (exports.KnownAnalyzeConversationResultsKind = {}));
/** Known values of {@link TaskState} that the service accepts. */
exports.KnownTaskState = void 0;
(function (KnownTaskState) {
    /** NotStarted */
    KnownTaskState["NotStarted"] = "notStarted";
    /** Running */
    KnownTaskState["Running"] = "running";
    /** Succeeded */
    KnownTaskState["Succeeded"] = "succeeded";
    /** Failed */
    KnownTaskState["Failed"] = "failed";
    /** Cancelled */
    KnownTaskState["Cancelled"] = "cancelled";
    /** Cancelling */
    KnownTaskState["Cancelling"] = "cancelling";
})(exports.KnownTaskState || (exports.KnownTaskState = {}));
/** Known values of {@link Role} that the service accepts. */
exports.KnownRole = void 0;
(function (KnownRole) {
    /** Agent */
    KnownRole["Agent"] = "agent";
    /** Customer */
    KnownRole["Customer"] = "customer";
    /** Generic */
    KnownRole["Generic"] = "generic";
})(exports.KnownRole || (exports.KnownRole = {}));
/** Known values of {@link StringIndexType} that the service accepts. */
exports.KnownStringIndexType = void 0;
(function (KnownStringIndexType) {
    /** Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. */
    KnownStringIndexType["TextElementsV8"] = "TextElements_v8";
    /** Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. */
    KnownStringIndexType["UnicodeCodePoint"] = "UnicodeCodePoint";
    /** Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript. */
    KnownStringIndexType["Utf16CodeUnit"] = "Utf16CodeUnit";
})(exports.KnownStringIndexType || (exports.KnownStringIndexType = {}));
/** Known values of {@link TargetProjectKind} that the service accepts. */
exports.KnownTargetProjectKind = void 0;
(function (KnownTargetProjectKind) {
    /** Luis */
    KnownTargetProjectKind["Luis"] = "Luis";
    /** Conversation */
    KnownTargetProjectKind["Conversation"] = "Conversation";
    /** QuestionAnswering */
    KnownTargetProjectKind["QuestionAnswering"] = "QuestionAnswering";
    /** NonLinked */
    KnownTargetProjectKind["NonLinked"] = "NonLinked";
})(exports.KnownTargetProjectKind || (exports.KnownTargetProjectKind = {}));
/** Known values of {@link ProjectKind} that the service accepts. */
exports.KnownProjectKind = void 0;
(function (KnownProjectKind) {
    /** Conversation */
    KnownProjectKind["Conversation"] = "Conversation";
    /** Orchestration */
    KnownProjectKind["Orchestration"] = "Orchestration";
})(exports.KnownProjectKind || (exports.KnownProjectKind = {}));
/** Known values of {@link ResolutionKind} that the service accepts. */
exports.KnownResolutionKind = void 0;
(function (KnownResolutionKind) {
    /** Boolean */
    KnownResolutionKind["Boolean"] = "Boolean";
    /** DateTime */
    KnownResolutionKind["DateTime"] = "DateTime";
    /** Number */
    KnownResolutionKind["Number"] = "Number";
    /** Ordinal */
    KnownResolutionKind["Ordinal"] = "Ordinal";
    /** Speed */
    KnownResolutionKind["Speed"] = "Speed";
    /** Weight */
    KnownResolutionKind["Weight"] = "Weight";
    /** Length */
    KnownResolutionKind["Length"] = "Length";
    /** Volume */
    KnownResolutionKind["Volume"] = "Volume";
    /** Area */
    KnownResolutionKind["Area"] = "Area";
    /** Age */
    KnownResolutionKind["Age"] = "Age";
    /** Information */
    KnownResolutionKind["Information"] = "Information";
    /** Temperature */
    KnownResolutionKind["Temperature"] = "Temperature";
    /** Currency */
    KnownResolutionKind["Currency"] = "Currency";
    /** NumericRange */
    KnownResolutionKind["NumericRange"] = "NumericRange";
    /** TemporalSpan */
    KnownResolutionKind["TemporalSpan"] = "TemporalSpan";
})(exports.KnownResolutionKind || (exports.KnownResolutionKind = {}));
/** Known values of {@link ExtraInformationKind} that the service accepts. */
exports.KnownExtraInformationKind = void 0;
(function (KnownExtraInformationKind) {
    /** EntitySubtype */
    KnownExtraInformationKind["EntitySubtype"] = "EntitySubtype";
    /** ListKey */
    KnownExtraInformationKind["ListKey"] = "ListKey";
})(exports.KnownExtraInformationKind || (exports.KnownExtraInformationKind = {}));
/** Known values of {@link RankerKind} that the service accepts. */
exports.KnownRankerKind = void 0;
(function (KnownRankerKind) {
    /** Question only ranker. */
    KnownRankerKind["QuestionOnly"] = "QuestionOnly";
    /** Default ranker. */
    KnownRankerKind["Default"] = "Default";
})(exports.KnownRankerKind || (exports.KnownRankerKind = {}));
/** Known values of {@link LogicalOperationKind} that the service accepts. */
exports.KnownLogicalOperationKind = void 0;
(function (KnownLogicalOperationKind) {
    /** AND */
    KnownLogicalOperationKind["AND"] = "AND";
    /** OR */
    KnownLogicalOperationKind["OR"] = "OR";
})(exports.KnownLogicalOperationKind || (exports.KnownLogicalOperationKind = {}));
/** Known values of {@link AgeUnit} that the service accepts. */
exports.KnownAgeUnit = void 0;
(function (KnownAgeUnit) {
    /** Unspecified */
    KnownAgeUnit["Unspecified"] = "Unspecified";
    /** Year */
    KnownAgeUnit["Year"] = "Year";
    /** Month */
    KnownAgeUnit["Month"] = "Month";
    /** Week */
    KnownAgeUnit["Week"] = "Week";
    /** Day */
    KnownAgeUnit["Day"] = "Day";
})(exports.KnownAgeUnit || (exports.KnownAgeUnit = {}));
/** Known values of {@link VolumeUnit} that the service accepts. */
exports.KnownVolumeUnit = void 0;
(function (KnownVolumeUnit) {
    /** Unspecified */
    KnownVolumeUnit["Unspecified"] = "Unspecified";
    /** CubicMeter */
    KnownVolumeUnit["CubicMeter"] = "CubicMeter";
    /** CubicCentimeter */
    KnownVolumeUnit["CubicCentimeter"] = "CubicCentimeter";
    /** CubicMillimeter */
    KnownVolumeUnit["CubicMillimeter"] = "CubicMillimeter";
    /** Hectoliter */
    KnownVolumeUnit["Hectoliter"] = "Hectoliter";
    /** Decaliter */
    KnownVolumeUnit["Decaliter"] = "Decaliter";
    /** Liter */
    KnownVolumeUnit["Liter"] = "Liter";
    /** Centiliter */
    KnownVolumeUnit["Centiliter"] = "Centiliter";
    /** Milliliter */
    KnownVolumeUnit["Milliliter"] = "Milliliter";
    /** CubicYard */
    KnownVolumeUnit["CubicYard"] = "CubicYard";
    /** CubicInch */
    KnownVolumeUnit["CubicInch"] = "CubicInch";
    /** CubicFoot */
    KnownVolumeUnit["CubicFoot"] = "CubicFoot";
    /** CubicMile */
    KnownVolumeUnit["CubicMile"] = "CubicMile";
    /** FluidOunce */
    KnownVolumeUnit["FluidOunce"] = "FluidOunce";
    /** Teaspoon */
    KnownVolumeUnit["Teaspoon"] = "Teaspoon";
    /** Tablespoon */
    KnownVolumeUnit["Tablespoon"] = "Tablespoon";
    /** Pint */
    KnownVolumeUnit["Pint"] = "Pint";
    /** Quart */
    KnownVolumeUnit["Quart"] = "Quart";
    /** Cup */
    KnownVolumeUnit["Cup"] = "Cup";
    /** Gill */
    KnownVolumeUnit["Gill"] = "Gill";
    /** Pinch */
    KnownVolumeUnit["Pinch"] = "Pinch";
    /** FluidDram */
    KnownVolumeUnit["FluidDram"] = "FluidDram";
    /** Barrel */
    KnownVolumeUnit["Barrel"] = "Barrel";
    /** Minim */
    KnownVolumeUnit["Minim"] = "Minim";
    /** Cord */
    KnownVolumeUnit["Cord"] = "Cord";
    /** Peck */
    KnownVolumeUnit["Peck"] = "Peck";
    /** Bushel */
    KnownVolumeUnit["Bushel"] = "Bushel";
    /** Hogshead */
    KnownVolumeUnit["Hogshead"] = "Hogshead";
})(exports.KnownVolumeUnit || (exports.KnownVolumeUnit = {}));
/** Known values of {@link SpeedUnit} that the service accepts. */
exports.KnownSpeedUnit = void 0;
(function (KnownSpeedUnit) {
    /** Unspecified */
    KnownSpeedUnit["Unspecified"] = "Unspecified";
    /** MetersPerSecond */
    KnownSpeedUnit["MetersPerSecond"] = "MetersPerSecond";
    /** KilometersPerHour */
    KnownSpeedUnit["KilometersPerHour"] = "KilometersPerHour";
    /** KilometersPerMinute */
    KnownSpeedUnit["KilometersPerMinute"] = "KilometersPerMinute";
    /** KilometersPerSecond */
    KnownSpeedUnit["KilometersPerSecond"] = "KilometersPerSecond";
    /** MilesPerHour */
    KnownSpeedUnit["MilesPerHour"] = "MilesPerHour";
    /** Knot */
    KnownSpeedUnit["Knot"] = "Knot";
    /** FootPerSecond */
    KnownSpeedUnit["FootPerSecond"] = "FootPerSecond";
    /** FootPerMinute */
    KnownSpeedUnit["FootPerMinute"] = "FootPerMinute";
    /** YardsPerMinute */
    KnownSpeedUnit["YardsPerMinute"] = "YardsPerMinute";
    /** YardsPerSecond */
    KnownSpeedUnit["YardsPerSecond"] = "YardsPerSecond";
    /** MetersPerMillisecond */
    KnownSpeedUnit["MetersPerMillisecond"] = "MetersPerMillisecond";
    /** CentimetersPerMillisecond */
    KnownSpeedUnit["CentimetersPerMillisecond"] = "CentimetersPerMillisecond";
    /** KilometersPerMillisecond */
    KnownSpeedUnit["KilometersPerMillisecond"] = "KilometersPerMillisecond";
})(exports.KnownSpeedUnit || (exports.KnownSpeedUnit = {}));
/** Known values of {@link AreaUnit} that the service accepts. */
exports.KnownAreaUnit = void 0;
(function (KnownAreaUnit) {
    /** Unspecified */
    KnownAreaUnit["Unspecified"] = "Unspecified";
    /** SquareKilometer */
    KnownAreaUnit["SquareKilometer"] = "SquareKilometer";
    /** SquareHectometer */
    KnownAreaUnit["SquareHectometer"] = "SquareHectometer";
    /** SquareDecameter */
    KnownAreaUnit["SquareDecameter"] = "SquareDecameter";
    /** SquareDecimeter */
    KnownAreaUnit["SquareDecimeter"] = "SquareDecimeter";
    /** SquareMeter */
    KnownAreaUnit["SquareMeter"] = "SquareMeter";
    /** SquareCentimeter */
    KnownAreaUnit["SquareCentimeter"] = "SquareCentimeter";
    /** SquareMillimeter */
    KnownAreaUnit["SquareMillimeter"] = "SquareMillimeter";
    /** SquareInch */
    KnownAreaUnit["SquareInch"] = "SquareInch";
    /** SquareFoot */
    KnownAreaUnit["SquareFoot"] = "SquareFoot";
    /** SquareMile */
    KnownAreaUnit["SquareMile"] = "SquareMile";
    /** SquareYard */
    KnownAreaUnit["SquareYard"] = "SquareYard";
    /** Acre */
    KnownAreaUnit["Acre"] = "Acre";
})(exports.KnownAreaUnit || (exports.KnownAreaUnit = {}));
/** Known values of {@link LengthUnit} that the service accepts. */
exports.KnownLengthUnit = void 0;
(function (KnownLengthUnit) {
    /** Unspecified */
    KnownLengthUnit["Unspecified"] = "Unspecified";
    /** Kilometer */
    KnownLengthUnit["Kilometer"] = "Kilometer";
    /** Hectometer */
    KnownLengthUnit["Hectometer"] = "Hectometer";
    /** Decameter */
    KnownLengthUnit["Decameter"] = "Decameter";
    /** Meter */
    KnownLengthUnit["Meter"] = "Meter";
    /** Decimeter */
    KnownLengthUnit["Decimeter"] = "Decimeter";
    /** Centimeter */
    KnownLengthUnit["Centimeter"] = "Centimeter";
    /** Millimeter */
    KnownLengthUnit["Millimeter"] = "Millimeter";
    /** Micrometer */
    KnownLengthUnit["Micrometer"] = "Micrometer";
    /** Nanometer */
    KnownLengthUnit["Nanometer"] = "Nanometer";
    /** Picometer */
    KnownLengthUnit["Picometer"] = "Picometer";
    /** Mile */
    KnownLengthUnit["Mile"] = "Mile";
    /** Yard */
    KnownLengthUnit["Yard"] = "Yard";
    /** Inch */
    KnownLengthUnit["Inch"] = "Inch";
    /** Foot */
    KnownLengthUnit["Foot"] = "Foot";
    /** LightYear */
    KnownLengthUnit["LightYear"] = "LightYear";
    /** Pt */
    KnownLengthUnit["Pt"] = "Pt";
})(exports.KnownLengthUnit || (exports.KnownLengthUnit = {}));
/** Known values of {@link InformationUnit} that the service accepts. */
exports.KnownInformationUnit = void 0;
(function (KnownInformationUnit) {
    /** Unspecified */
    KnownInformationUnit["Unspecified"] = "Unspecified";
    /** Bit */
    KnownInformationUnit["Bit"] = "Bit";
    /** Kilobit */
    KnownInformationUnit["Kilobit"] = "Kilobit";
    /** Megabit */
    KnownInformationUnit["Megabit"] = "Megabit";
    /** Gigabit */
    KnownInformationUnit["Gigabit"] = "Gigabit";
    /** Terabit */
    KnownInformationUnit["Terabit"] = "Terabit";
    /** Petabit */
    KnownInformationUnit["Petabit"] = "Petabit";
    /** Byte */
    KnownInformationUnit["Byte"] = "Byte";
    /** Kilobyte */
    KnownInformationUnit["Kilobyte"] = "Kilobyte";
    /** Megabyte */
    KnownInformationUnit["Megabyte"] = "Megabyte";
    /** Gigabyte */
    KnownInformationUnit["Gigabyte"] = "Gigabyte";
    /** Terabyte */
    KnownInformationUnit["Terabyte"] = "Terabyte";
    /** Petabyte */
    KnownInformationUnit["Petabyte"] = "Petabyte";
})(exports.KnownInformationUnit || (exports.KnownInformationUnit = {}));
/** Known values of {@link TemperatureUnit} that the service accepts. */
exports.KnownTemperatureUnit = void 0;
(function (KnownTemperatureUnit) {
    /** Unspecified */
    KnownTemperatureUnit["Unspecified"] = "Unspecified";
    /** Fahrenheit */
    KnownTemperatureUnit["Fahrenheit"] = "Fahrenheit";
    /** Kelvin */
    KnownTemperatureUnit["Kelvin"] = "Kelvin";
    /** Rankine */
    KnownTemperatureUnit["Rankine"] = "Rankine";
    /** Celsius */
    KnownTemperatureUnit["Celsius"] = "Celsius";
})(exports.KnownTemperatureUnit || (exports.KnownTemperatureUnit = {}));
/** Known values of {@link WeightUnit} that the service accepts. */
exports.KnownWeightUnit = void 0;
(function (KnownWeightUnit) {
    /** Unspecified */
    KnownWeightUnit["Unspecified"] = "Unspecified";
    /** Kilogram */
    KnownWeightUnit["Kilogram"] = "Kilogram";
    /** Gram */
    KnownWeightUnit["Gram"] = "Gram";
    /** Milligram */
    KnownWeightUnit["Milligram"] = "Milligram";
    /** Gallon */
    KnownWeightUnit["Gallon"] = "Gallon";
    /** MetricTon */
    KnownWeightUnit["MetricTon"] = "MetricTon";
    /** Ton */
    KnownWeightUnit["Ton"] = "Ton";
    /** Pound */
    KnownWeightUnit["Pound"] = "Pound";
    /** Ounce */
    KnownWeightUnit["Ounce"] = "Ounce";
    /** Grain */
    KnownWeightUnit["Grain"] = "Grain";
    /** PennyWeight */
    KnownWeightUnit["PennyWeight"] = "PennyWeight";
    /** LongTonBritish */
    KnownWeightUnit["LongTonBritish"] = "LongTonBritish";
    /** ShortTonUS */
    KnownWeightUnit["ShortTonUS"] = "ShortTonUS";
    /** ShortHundredWeightUS */
    KnownWeightUnit["ShortHundredWeightUS"] = "ShortHundredWeightUS";
    /** Stone */
    KnownWeightUnit["Stone"] = "Stone";
    /** Dram */
    KnownWeightUnit["Dram"] = "Dram";
})(exports.KnownWeightUnit || (exports.KnownWeightUnit = {}));
/** Known values of {@link DateTimeSubKind} that the service accepts. */
exports.KnownDateTimeSubKind = void 0;
(function (KnownDateTimeSubKind) {
    /** Time */
    KnownDateTimeSubKind["Time"] = "Time";
    /** Date */
    KnownDateTimeSubKind["Date"] = "Date";
    /** DateTime */
    KnownDateTimeSubKind["DateTime"] = "DateTime";
    /** Duration */
    KnownDateTimeSubKind["Duration"] = "Duration";
    /** Set */
    KnownDateTimeSubKind["Set"] = "Set";
})(exports.KnownDateTimeSubKind || (exports.KnownDateTimeSubKind = {}));
/** Known values of {@link TemporalModifier} that the service accepts. */
exports.KnownTemporalModifier = void 0;
(function (KnownTemporalModifier) {
    /** AfterApprox */
    KnownTemporalModifier["AfterApprox"] = "AfterApprox";
    /** Before */
    KnownTemporalModifier["Before"] = "Before";
    /** BeforeStart */
    KnownTemporalModifier["BeforeStart"] = "BeforeStart";
    /** Approx */
    KnownTemporalModifier["Approx"] = "Approx";
    /** ReferenceUndefined */
    KnownTemporalModifier["ReferenceUndefined"] = "ReferenceUndefined";
    /** SinceEnd */
    KnownTemporalModifier["SinceEnd"] = "SinceEnd";
    /** AfterMid */
    KnownTemporalModifier["AfterMid"] = "AfterMid";
    /** Start */
    KnownTemporalModifier["Start"] = "Start";
    /** After */
    KnownTemporalModifier["After"] = "After";
    /** BeforeEnd */
    KnownTemporalModifier["BeforeEnd"] = "BeforeEnd";
    /** Until */
    KnownTemporalModifier["Until"] = "Until";
    /** End */
    KnownTemporalModifier["End"] = "End";
    /** Less */
    KnownTemporalModifier["Less"] = "Less";
    /** Since */
    KnownTemporalModifier["Since"] = "Since";
    /** AfterStart */
    KnownTemporalModifier["AfterStart"] = "AfterStart";
    /** BeforeApprox */
    KnownTemporalModifier["BeforeApprox"] = "BeforeApprox";
    /** Mid */
    KnownTemporalModifier["Mid"] = "Mid";
    /** More */
    KnownTemporalModifier["More"] = "More";
})(exports.KnownTemporalModifier || (exports.KnownTemporalModifier = {}));
/** Known values of {@link NumberKind} that the service accepts. */
exports.KnownNumberKind = void 0;
(function (KnownNumberKind) {
    /** Integer */
    KnownNumberKind["Integer"] = "Integer";
    /** Decimal */
    KnownNumberKind["Decimal"] = "Decimal";
    /** Power */
    KnownNumberKind["Power"] = "Power";
    /** Fraction */
    KnownNumberKind["Fraction"] = "Fraction";
    /** Percent */
    KnownNumberKind["Percent"] = "Percent";
    /** Unspecified */
    KnownNumberKind["Unspecified"] = "Unspecified";
})(exports.KnownNumberKind || (exports.KnownNumberKind = {}));
/** Known values of {@link RelativeTo} that the service accepts. */
exports.KnownRelativeTo = void 0;
(function (KnownRelativeTo) {
    /** Current */
    KnownRelativeTo["Current"] = "Current";
    /** End */
    KnownRelativeTo["End"] = "End";
    /** Start */
    KnownRelativeTo["Start"] = "Start";
})(exports.KnownRelativeTo || (exports.KnownRelativeTo = {}));
/** Known values of {@link RangeKind} that the service accepts. */
exports.KnownRangeKind = void 0;
(function (KnownRangeKind) {
    /** Number */
    KnownRangeKind["Number"] = "Number";
    /** Speed */
    KnownRangeKind["Speed"] = "Speed";
    /** Weight */
    KnownRangeKind["Weight"] = "Weight";
    /** Length */
    KnownRangeKind["Length"] = "Length";
    /** Volume */
    KnownRangeKind["Volume"] = "Volume";
    /** Area */
    KnownRangeKind["Area"] = "Area";
    /** Age */
    KnownRangeKind["Age"] = "Age";
    /** Information */
    KnownRangeKind["Information"] = "Information";
    /** Temperature */
    KnownRangeKind["Temperature"] = "Temperature";
    /** Currency */
    KnownRangeKind["Currency"] = "Currency";
})(exports.KnownRangeKind || (exports.KnownRangeKind = {}));
/** Known values of {@link ConversationPIICategory} that the service accepts. */
exports.KnownConversationPIICategory = void 0;
(function (KnownConversationPIICategory) {
    /** Address */
    KnownConversationPIICategory["Address"] = "Address";
    /** CreditCard */
    KnownConversationPIICategory["CreditCard"] = "CreditCard";
    /** Email */
    KnownConversationPIICategory["Email"] = "Email";
    /** Name */
    KnownConversationPIICategory["Name"] = "Name";
    /** NumericIdentifier */
    KnownConversationPIICategory["NumericIdentifier"] = "NumericIdentifier";
    /** PhoneNumber */
    KnownConversationPIICategory["PhoneNumber"] = "PhoneNumber";
    /** All */
    KnownConversationPIICategory["All"] = "All";
    /** Default */
    KnownConversationPIICategory["Default"] = "Default";
})(exports.KnownConversationPIICategory || (exports.KnownConversationPIICategory = {}));
/** Known values of {@link TranscriptContentType} that the service accepts. */
exports.KnownTranscriptContentType = void 0;
(function (KnownTranscriptContentType) {
    /** Lexical */
    KnownTranscriptContentType["Lexical"] = "lexical";
    /** Itn */
    KnownTranscriptContentType["Itn"] = "itn";
    /** MaskedItn */
    KnownTranscriptContentType["MaskedItn"] = "maskedItn";
    /** Text */
    KnownTranscriptContentType["Text"] = "text";
})(exports.KnownTranscriptContentType || (exports.KnownTranscriptContentType = {}));
/** Known values of {@link SummaryAspect} that the service accepts. */
exports.KnownSummaryAspect = void 0;
(function (KnownSummaryAspect) {
    /** Issue */
    KnownSummaryAspect["Issue"] = "issue";
    /** Resolution */
    KnownSummaryAspect["Resolution"] = "resolution";
})(exports.KnownSummaryAspect || (exports.KnownSummaryAspect = {}));

Object.defineProperty(exports, 'AzureKeyCredential', {
    enumerable: true,
    get: function () { return coreAuth.AzureKeyCredential; }
});
exports.ConversationAnalysisClient = ConversationAnalysisClient;
//# sourceMappingURL=index.js.map
